!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLCONFS	nbproject/Makefile-impl.mk	/^ALLCONFS=$/;"	m
Alpha_Kang	src/InonizationFormula.cpp	/^MyDataF Alpha_Kang(MyDataF E) {$/;"	f
Alpha_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Alpha_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Alpha_Nikonov	src/InonizationFormula.cpp	/^MyDataF Alpha_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Amp	src/hpw3d.cpp	/^MyDataF Amp;$/;"	v
Amp	test/gaussian.cpp	/^MyDataF Amp;$/;"	v
Amp	test/sine.cpp	/^MyDataF Amp;$/;"	v
Approximations	3DFormulaTransforming.tex	/^\\section{Approximations}$/;"	s
BUILD_SUBPROJECTS	nbproject/Makefile-impl.mk	/^BUILD_SUBPROJECTS=${BUILD_SUBPROJECTS_${SUBPROJECTS}}$/;"	m
BUILD_SUBPROJECTS_	nbproject/Makefile-impl.mk	/^BUILD_SUBPROJECTS_=.build-subprojects$/;"	m
BUILD_SUBPROJECTS_NO	nbproject/Makefile-impl.mk	/^BUILD_SUBPROJECTS_NO=$/;"	m
C	src/common.h	/^const MyDataF C = 2.99792458E8; \/\/ speed of light in free space$/;"	v
C	test/testMain.cpp	/^double C = 2.99792458E8;$/;"	v
CA	src/fdtd.h	/^    MyDataF *CA;$/;"	m	class:fdtd
CA	test/testMain.cpp	/^float *CA;$/;"	v
CA	test/testcpml.cpp	/^MyDataF *CA;$/;"	v
CB	src/fdtd.h	/^    MyDataF *CB;$/;"	m	class:fdtd
CB	test/testMain.cpp	/^float *CB;$/;"	v
CB	test/testcpml.cpp	/^MyDataF *CB;$/;"	v
CLEAN_SUBPROJECTS	nbproject/Makefile-impl.mk	/^CLEAN_SUBPROJECTS=${CLEAN_SUBPROJECTS_${SUBPROJECTS}}$/;"	m
CLEAN_SUBPROJECTS_	nbproject/Makefile-impl.mk	/^CLEAN_SUBPROJECTS_=.clean-subprojects$/;"	m
CLEAN_SUBPROJECTS_NO	nbproject/Makefile-impl.mk	/^CLEAN_SUBPROJECTS_NO=$/;"	m
CND_BASEDIR	nbproject/Makefile-variables.mk	/^CND_BASEDIR=`pwd`$/;"	m
CND_BUILDDIR	nbproject/Makefile-variables.mk	/^CND_BUILDDIR=build$/;"	m
CND_DISTDIR	nbproject/Makefile-variables.mk	/^CND_DISTDIR=dist$/;"	m
COMMON_H	src/common.h	2;"	d
CONF	nbproject/Makefile-impl.mk	/^CONF=${DEFAULTCONF}$/;"	m
CPML_H	src/cpml.h	9;"	d
CaptData	src/datastruct.cpp	/^void data3d<DataType>::CaptData(const unsigned num, unsigned leap) {$/;"	f	class:data3d
Cexex	src/fdtd.h	/^    data3d<MyDataF> Cexex, Ceyey, Cezez, Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Cexh	src/fdtd.h	/^    data3d<MyDataF> Cexh, Ceyh, Cezh;$/;"	m	class:fdtd
Cexvx	src/fdtd.h	/^    data3d<MyDataF> Cexex, Ceyey, Cezez, Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Ceyey	src/fdtd.h	/^    data3d<MyDataF> Cexex, Ceyey, Cezez, Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Ceyh	src/fdtd.h	/^    data3d<MyDataF> Cexh, Ceyh, Cezh;$/;"	m	class:fdtd
Ceyvy	src/fdtd.h	/^    data3d<MyDataF> Cexex, Ceyey, Cezez, Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Cezez	src/fdtd.h	/^    data3d<MyDataF> Cexex, Ceyey, Cezez, Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Cezh	src/fdtd.h	/^    data3d<MyDataF> Cexh, Ceyh, Cezh;$/;"	m	class:fdtd
Cezvz	src/fdtd.h	/^    data3d<MyDataF> Cexex, Ceyey, Cezez, Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
CheckStruct	src/datastruct.cpp	/^bool data3d<DataType>::CheckStruct() {$/;"	f	class:data3d
ClearSim	src/datastruct.cpp	/^void data3d<DataType>::ClearSim() {$/;"	f	class:data3d
CloseEngine	src/datastruct.cpp	/^int data3d<DataType>::CloseEngine() {$/;"	f	class:data3d
CreateStruct	src/datastruct.cpp	/^int data3d<DataType>::CreateStruct(const data3d< DataType > &stru) {$/;"	f	class:data3d
CreateStruct	src/datastruct.cpp	/^int data3d<DataType>::CreateStruct(const data3d< DataType > &stru, DataType initVal) {$/;"	f	class:data3d
CreateStruct	src/datastruct.cpp	/^int data3d<DataType>::CreateStruct(unsigned nnx, unsigned nny, unsigned nnz) {$/;"	f	class:data3d
CreateStruct	src/datastruct.cpp	/^int data3d<DataType>::CreateStruct(unsigned nnx, unsigned nny, unsigned nnz, DataType initVal) {$/;"	f	class:data3d
CreateStruct	src/datastruct.h	/^    void CreateStruct(unsigned num) {$/;"	f	class:data1d
Cvxex	src/fdtd.h	/^    MyDataF Cvxex, Cvyey, Cvzez;$/;"	m	class:fdtd
Cvyey	src/fdtd.h	/^    MyDataF Cvxex, Cvyey, Cvzez;$/;"	m	class:fdtd
Cvzez	src/fdtd.h	/^    MyDataF Cvxex, Cvyey, Cvzez;$/;"	m	class:fdtd
DA	src/fdtd.h	/^    MyDataF DA;$/;"	m	class:fdtd
DA	test/testMain.cpp	/^float DA;$/;"	v
DA	test/testcpml.cpp	/^MyDataF DA;$/;"	v
DATASTRUCT_H	src/datastruct.h	26;"	d
DB	src/fdtd.h	/^    MyDataF DB;$/;"	m	class:fdtd
DB	test/testMain.cpp	/^float DB;$/;"	v
DB	test/testcpml.cpp	/^MyDataF DB;$/;"	v
DEFAULTCONF	nbproject/Makefile-impl.mk	/^DEFAULTCONF=$/;"	m
DEFAULT_PML_SIZE	src/common.h	8;"	d
DEFAULT_THREAD_COUNT	src/common.h	7;"	d
DEFAULT_WAVE_TYPE	src/common.h	13;"	d
DERIVE_GAUSSIAN_TYPE	src/common.h	11;"	d
Da	src/fdtd.h	/^    MyDataF Da;$/;"	m	class:fdtd
De	src/fdtd.h	/^    MyDataF De;$/;"	m	class:fdtd
Erms	src/fdtd.h	/^    data3d<MyDataF> Erms;$/;"	m	class:fdtd
Eta_Kang	src/InonizationFormula.cpp	/^MyDataF Eta_Kang(MyDataF E) {$/;"	f
Eta_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Eta_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Eta_Nikonov	src/InonizationFormula.cpp	/^MyDataF Eta_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Ex	src/fdtd.h	/^    data3d<MyDataF> Ex;$/;"	m	class:fdtd
Ex	test/testMain.cpp	/^float ***Ex;$/;"	v
Ex	test/testcpml.cpp	/^data3d<MyDataF> Ex;$/;"	v
Ey	src/fdtd.h	/^    data3d<MyDataF> Ey;$/;"	m	class:fdtd
Ey	test/testMain.cpp	/^float ***Ey;$/;"	v
Ey	test/testcpml.cpp	/^data3d<MyDataF> Ey;$/;"	v
Ez	src/fdtd.h	/^    data3d<MyDataF> Ez;$/;"	m	class:fdtd
Ez	test/testMain.cpp	/^float ***Ez;$/;"	v
Ez	test/testcpml.cpp	/^data3d<MyDataF> Ez;$/;"	v
Full iteration equations	3DFormulaTransforming.tex	/^\\section{Full iteration equations}$/;"	s
GAUSSIAN	src/inputChecker.h	/^    const static int GAUSSIAN = GAUSSIAN_WAVE_TYPE;$/;"	m	class:inputChecker
GAUSSIAN_WAVE_TYPE	src/common.h	9;"	d
Hx	src/fdtd.h	/^    data3d<MyDataF> Hx;$/;"	m	class:fdtd
Hx	test/testMain.cpp	/^float ***Hx;$/;"	v
Hx	test/testcpml.cpp	/^data3d<MyDataF> Hx;$/;"	v
Hy	src/fdtd.h	/^    data3d<MyDataF> Hy;$/;"	m	class:fdtd
Hy	test/testMain.cpp	/^float ***Hy;$/;"	v
Hy	test/testcpml.cpp	/^data3d<MyDataF> Hy;$/;"	v
Hz	src/fdtd.h	/^    data3d<MyDataF> Hz;$/;"	m	class:fdtd
Hz	test/testMain.cpp	/^float ***Hz;$/;"	v
Hz	test/testcpml.cpp	/^data3d<MyDataF> Hz;$/;"	v
ID1	src/fdtd.h	/^    data3d<unsigned> ID1; \/\/medium definition array for Ex$/;"	m	class:fdtd
ID1	test/testMain.cpp	/^short ***ID1; \/\/medium definition array for Ex$/;"	v
ID1	test/testcpml.cpp	/^data3d<short> ID1; \/\/medium definition array for Ex$/;"	v
ID2	src/fdtd.h	/^    data3d<unsigned> ID2; \/\/medium definition array for Ey$/;"	m	class:fdtd
ID2	test/testMain.cpp	/^short ***ID2; \/\/medium definition array for Ey$/;"	v
ID2	test/testcpml.cpp	/^data3d<short> ID2; \/\/medium definition array for Ey$/;"	v
ID3	src/fdtd.h	/^    data3d<unsigned> ID3; \/\/medium definition array for Ez$/;"	m	class:fdtd
ID3	test/testMain.cpp	/^short ***ID3; \/\/medium definition array for Ez$/;"	v
ID3	test/testcpml.cpp	/^data3d<short> ID3; \/\/medium definition array for Ez$/;"	v
INONIZATION_FORMULA_H	src/InonizationFormula.h	3;"	d
INPUTCHECKER_H	src/inputChecker.h	9;"	d
Imax	src/cpml.h	/^    unsigned Imax;$/;"	m	class:cpml
Imax	src/fdtd.h	/^    unsigned Imax;$/;"	m	class:fdtd
Imax	test/testMain.cpp	/^int Imax = 51;$/;"	v
Imax	test/testcpml.cpp	/^int Imax = 50;$/;"	v
InitMatlabEngine	src/datastruct.cpp	/^int data3d<DataType>::InitMatlabEngine() {$/;"	f	class:data3d
InitPlot	src/datastruct.cpp	/^void data3d<DataType>::InitPlot() {$/;"	f	class:data3d
InitStructData	src/datastruct.cpp	/^void data3d<DataType>::InitStructData(DataType initVal) {$/;"	f	class:data3d
Initial	src/cpml.h	/^    void Initial(unsigned nx, unsigned ny, unsigned nz, unsigned ncpml) {$/;"	f	class:cpml
InitialMuEps	src/cpml.h	/^    void InitialMuEps() {$/;"	f	class:cpml
IntegerEeff	src/fdtd.cpp	/^void fdtd::IntegerEeff() {$/;"	f	class:fdtd
InterpErms	src/fdtd.cpp	/^int fdtd::InterpErms() {$/;"	f	class:fdtd
Jmax	src/cpml.h	/^    unsigned Jmax;$/;"	m	class:cpml
Jmax	src/fdtd.h	/^    unsigned Jmax;$/;"	m	class:fdtd
Jmax	test/testMain.cpp	/^int Jmax = 126;$/;"	v
Jmax	test/testcpml.cpp	/^int Jmax = 50;$/;"	v
Kmax	src/cpml.h	/^    unsigned Kmax;$/;"	m	class:cpml
Kmax	src/fdtd.h	/^    unsigned Kmax;$/;"	m	class:fdtd
Kmax	test/testMain.cpp	/^int Kmax = 26;$/;"	v
Kmax	test/testcpml.cpp	/^int Kmax = 50;$/;"	v
MAX_ARRAY_SIZE	src/datastruct.h	44;"	d
MyArray	src/datastruct.h	/^    mxArray *MyArray;$/;"	m	class:data3d
MyDataF	src/common.h	/^typedef double MyDataF;$/;"	t
Ne	src/fdtd.h	/^    data3d<MyDataF> Ne, Ne_pre;$/;"	m	class:fdtd
Ne0	src/fdtd.h	/^    MyDataF Ne0;$/;"	m	class:fdtd
Ne_pre	src/fdtd.h	/^    data3d<MyDataF> Ne, Ne_pre;$/;"	m	class:fdtd
Niu_Kang	src/InonizationFormula.cpp	/^void Niu_Kang(MyDataF *pNiu_i, MyDataF *pNiu_a, MyDataF E) {$/;"	f
Niu_MorrowAndLowke	src/InonizationFormula.cpp	/^void Niu_MorrowAndLowke(MyDataF *pNiu_i, MyDataF *pNiu_a, MyDataF E, MyDataF N) {$/;"	f
Niu_Nikonov	src/InonizationFormula.cpp	/^void Niu_Nikonov(MyDataF *pNiu_i, MyDataF *pNiu_a, MyDataF E, MyDataF P) {$/;"	f
Niu_a_Kang	src/InonizationFormula.cpp	/^MyDataF Niu_a_Kang(MyDataF E) {$/;"	f
Niu_a_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Niu_a_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Niu_a_Nikonov	src/InonizationFormula.cpp	/^MyDataF Niu_a_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Niu_i_Kang	src/InonizationFormula.cpp	/^MyDataF Niu_i_Kang(MyDataF E) {$/;"	f
Niu_i_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Niu_i_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Niu_i_Nikonov	src/InonizationFormula.cpp	/^MyDataF Niu_i_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Nu_c	src/fdtd.h	/^    data3d<MyDataF> Nu_c;$/;"	m	class:fdtd
Number	src/datastruct.h	/^    int Number;$/;"	m	class:data3d
OBJS	Makefile	/^OBJS=cpml.o hpw3d.o fdtd.o InonizationFormula.o inputChecker.o$/;"	m
Orignal functions	3DFormulaTransforming.tex	/^\\section{Orignal functions}$/;"	s
PROJECTNAME	nbproject/Makefile-impl.mk	/^PROJECTNAME=hpw3d$/;"	m
PlotArrays	src/datastruct.cpp	/^void data3d<DataType>::PlotArrays() {$/;"	f	class:data3d
PrintData	src/datastruct.cpp	/^void data3d<DataType>::PrintData() {$/;"	f	class:data3d
ResetStructData	src/datastruct.cpp	/^int data3d<DataType>::ResetStructData(DataType Val) {$/;"	f	class:data3d
SINE	src/inputChecker.h	/^    const static int SINE = SINE_WAVE_TYPE;$/;"	m	class:inputChecker
SINE_WAVE_TYPE	src/common.h	10;"	d
SOURCE_DERIVE_GAUSSIAN	src/fdtd.h	/^    static const int SOURCE_DERIVE_GAUSSIAN = DERIVE_GAUSSIAN_TYPE;$/;"	m	class:fdtd
SOURCE_GAUSSIAN	src/fdtd.h	/^    static const int SOURCE_GAUSSIAN = GAUSSIAN_WAVE_TYPE;$/;"	m	class:fdtd
SOURCE_SINE	src/fdtd.h	/^    static const int SOURCE_SINE = SINE_WAVE_TYPE;$/;"	m	class:fdtd
SOURCE_ZERO	src/fdtd.h	/^    static const int SOURCE_ZERO = ZERO_TYPE;$/;"	m	class:fdtd
SRC	Makefile	/^SRC=src$/;"	m
SUBPROJECTS	nbproject/Makefile-impl.mk	/^SUBPROJECTS=${SUB_${SUB}}$/;"	m
SUB_no	nbproject/Makefile-impl.mk	/^SUB_no=NO$/;"	m
SaveData	src/datastruct.cpp	/^void data3d<DataType>::SaveData(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveData	src/datastruct.cpp	/^void data3d<DataType>::SaveData(unsigned k, unsigned leap, unsigned step, int type) {$/;"	f	class:data3d
SaveData	src/datastruct.cpp	/^void data3d<DataType>::SaveData(unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveXPlain	src/datastruct.cpp	/^void data3d<DataType>::SaveXPlain(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveYPlain	src/datastruct.cpp	/^void data3d<DataType>::SaveYPlain(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveZPlain	src/datastruct.cpp	/^void data3d<DataType>::SaveZPlain(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SetPlasmaVar	src/fdtd.cpp	/^void fdtd::SetPlasmaVar(MyDataF _rei, MyDataF _vm, MyDataF _p, int _ftype) {$/;"	f	class:fdtd
SetSineSource	src/fdtd.cpp	/^void fdtd::SetSineSource(MyDataF omega_) {$/;"	f	class:fdtd
StartUp	src/fdtd.cpp	/^void fdtd::StartUp() {$/;"	f	class:fdtd
T	src/hpw3d.cpp	/^MyDataF T; \/\/ ns$/;"	v
T	test/gaussian.cpp	/^MyDataF T; \/\/ ns$/;"	v
T	test/sine.cpp	/^MyDataF T; \/\/ ns$/;"	v
TEST	Makefile	/^TEST=testCPML sine testMain gaussian$/;"	m
TEST_OBJ	Makefile	/^TEST_OBJ=sine.o testMain.o testcpml.o gaussian.o openmp.o$/;"	m
TEST_SRC_DIR	Makefile	/^TEST_SRC_DIR=.\/test\/$/;"	m
UpdateDensity	src/fdtd.cpp	/^int fdtd::UpdateDensity(void) {$/;"	f	class:fdtd
UpdateErms	src/fdtd.cpp	/^int fdtd::UpdateErms(void) {$/;"	f	class:fdtd
UpdateVeloity	src/fdtd.cpp	/^int fdtd::UpdateVeloity(void) {$/;"	f	class:fdtd
Vx	src/fdtd.h	/^    data3d<MyDataF> Vx;$/;"	m	class:fdtd
Vy	src/fdtd.h	/^    data3d<MyDataF> Vy;$/;"	m	class:fdtd
Vz	src/fdtd.h	/^    data3d<MyDataF> Vz;$/;"	m	class:fdtd
WallCircleBound	src/fdtd.cpp	/^void fdtd::WallCircleBound(data3d<MyDataF> &stru) {$/;"	f	class:fdtd
We_Kang	src/InonizationFormula.cpp	/^MyDataF We_Kang(MyDataF E) {$/;"	f
We_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF We_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
We_Nikonov	src/InonizationFormula.cpp	/^MyDataF We_Nikonov(MyDataF E, MyDataF P) {$/;"	f
ZERO_TYPE	src/common.h	12;"	d
_CRT_SECURE_NO_WARNINGS	src/datastruct.cpp	27;"	d	file:
a	src/fdtd.h	/^    MyDataF a;$/;"	m	class:fdtd
alpha	src/fdtd.h	/^    MyDataF alpha;$/;"	m	class:fdtd
alpha_x_max	src/cpml.h	/^    type1 alpha_x_max;$/;"	m	class:cpml
alpha_x_max	test/testMain.cpp	/^double alpha_x_max;$/;"	v
alpha_y_max	src/cpml.h	/^    type1 alpha_y_max;$/;"	m	class:cpml
alpha_y_max	test/testMain.cpp	/^double alpha_y_max;$/;"	v
alpha_z_max	src/cpml.h	/^    type1 alpha_z_max;$/;"	m	class:cpml
alpha_z_max	test/testMain.cpp	/^double alpha_z_max;$/;"	v
alphae_x_PML_1	src/cpml.h	/^    data1d<type1> be_x_1, ce_x_1, alphae_x_PML_1, sige_x_PML_1, kappae_x_PML_1;$/;"	m	class:cpml
alphae_x_PML_1	test/testMain.cpp	/^float *be_x_1, *ce_x_1, *alphae_x_PML_1, *sige_x_PML_1, *kappae_x_PML_1;$/;"	v
alphae_x_PML_2	src/cpml.h	/^    data1d<type1> be_x_2, ce_x_2, alphae_x_PML_2, sige_x_PML_2, kappae_x_PML_2;$/;"	m	class:cpml
alphae_x_PML_2	test/testMain.cpp	/^float *be_x_2, *ce_x_2, *alphae_x_PML_2, *sige_x_PML_2, *kappae_x_PML_2;$/;"	v
alphae_y_PML_1	src/cpml.h	/^    data1d<type1> be_y_1, ce_y_1, alphae_y_PML_1, sige_y_PML_1, kappae_y_PML_1;$/;"	m	class:cpml
alphae_y_PML_1	test/testMain.cpp	/^float *be_y_1, *ce_y_1, *alphae_y_PML_1, *sige_y_PML_1, *kappae_y_PML_1;$/;"	v
alphae_y_PML_2	src/cpml.h	/^    data1d<type1> be_y_2, ce_y_2, alphae_y_PML_2, sige_y_PML_2, kappae_y_PML_2;$/;"	m	class:cpml
alphae_y_PML_2	test/testMain.cpp	/^float *be_y_2, *ce_y_2, *alphae_y_PML_2, *sige_y_PML_2, *kappae_y_PML_2;$/;"	v
alphae_z_PML_1	src/cpml.h	/^    data1d<type1> be_z_1, ce_z_1, alphae_z_PML_1, sige_z_PML_1, kappae_z_PML_1;$/;"	m	class:cpml
alphae_z_PML_1	test/testMain.cpp	/^float *be_z_1, *ce_z_1, *alphae_z_PML_1, *sige_z_PML_1, *kappae_z_PML_1;$/;"	v
alphae_z_PML_2	src/cpml.h	/^    data1d<type1> be_z_2, ce_z_2, alphae_z_PML_2, sige_z_PML_2, kappae_z_PML_2;$/;"	m	class:cpml
alphae_z_PML_2	test/testMain.cpp	/^float *be_z_2, *ce_z_2, *alphae_z_PML_2, *sige_z_PML_2, *kappae_z_PML_2;$/;"	v
alphah_x_PML_1	src/cpml.h	/^    data1d<type1> bh_x_1, ch_x_1, alphah_x_PML_1, sigh_x_PML_1, kappah_x_PML_1;$/;"	m	class:cpml
alphah_x_PML_1	test/testMain.cpp	/^float *bh_x_1, *ch_x_1, *alphah_x_PML_1, *sigh_x_PML_1, *kappah_x_PML_1;$/;"	v
alphah_x_PML_2	src/cpml.h	/^    data1d<type1> bh_x_2, ch_x_2, alphah_x_PML_2, sigh_x_PML_2, kappah_x_PML_2;$/;"	m	class:cpml
alphah_x_PML_2	test/testMain.cpp	/^float *bh_x_2, *ch_x_2, *alphah_x_PML_2, *sigh_x_PML_2, *kappah_x_PML_2;$/;"	v
alphah_y_PML_1	src/cpml.h	/^    data1d<type1> bh_y_1, ch_y_1, alphah_y_PML_1, sigh_y_PML_1, kappah_y_PML_1;$/;"	m	class:cpml
alphah_y_PML_1	test/testMain.cpp	/^float *bh_y_1, *ch_y_1, *alphah_y_PML_1, *sigh_y_PML_1, *kappah_y_PML_1;$/;"	v
alphah_y_PML_2	src/cpml.h	/^    data1d<type1> bh_y_2, ch_y_2, alphah_y_PML_2, sigh_y_PML_2, kappah_y_PML_2;$/;"	m	class:cpml
alphah_y_PML_2	test/testMain.cpp	/^float *bh_y_2, *ch_y_2, *alphah_y_PML_2, *sigh_y_PML_2, *kappah_y_PML_2;$/;"	v
alphah_z_PML_1	src/cpml.h	/^    data1d<type1> bh_z_1, ch_z_1, alphah_z_PML_1, sigh_z_PML_1, kappah_z_PML_1;$/;"	m	class:cpml
alphah_z_PML_1	test/testMain.cpp	/^float *bh_z_1, *ch_z_1, *alphah_z_PML_1, *sigh_z_PML_1, *kappah_z_PML_1;$/;"	v
alphah_z_PML_2	src/cpml.h	/^    data1d<type1> bh_z_2, ch_z_2, alphah_z_PML_2, sigh_z_PML_2, kappah_z_PML_2;$/;"	m	class:cpml
alphah_z_PML_2	test/testMain.cpp	/^float *bh_z_2, *ch_z_2, *alphah_z_PML_2, *sigh_z_PML_2, *kappah_z_PML_2;$/;"	v
amp	src/fdtd.h	/^    MyDataF amp; \/\/ Amplitude$/;"	m	class:fdtd
amp	test/testMain.cpp	/^double amp = 1e-10; \/\/ Amplitude$/;"	v
amp	test/testcpml.cpp	/^double amp = 1000; \/\/ Amplitude$/;"	v
amptidute	src/inputChecker.h	/^    double amptidute;$/;"	m	class:inputChecker
be_x_1	src/cpml.h	/^    data1d<type1> be_x_1, ce_x_1, alphae_x_PML_1, sige_x_PML_1, kappae_x_PML_1;$/;"	m	class:cpml
be_x_1	test/testMain.cpp	/^float *be_x_1, *ce_x_1, *alphae_x_PML_1, *sige_x_PML_1, *kappae_x_PML_1;$/;"	v
be_x_2	src/cpml.h	/^    data1d<type1> be_x_2, ce_x_2, alphae_x_PML_2, sige_x_PML_2, kappae_x_PML_2;$/;"	m	class:cpml
be_x_2	test/testMain.cpp	/^float *be_x_2, *ce_x_2, *alphae_x_PML_2, *sige_x_PML_2, *kappae_x_PML_2;$/;"	v
be_y_1	src/cpml.h	/^    data1d<type1> be_y_1, ce_y_1, alphae_y_PML_1, sige_y_PML_1, kappae_y_PML_1;$/;"	m	class:cpml
be_y_1	test/testMain.cpp	/^float *be_y_1, *ce_y_1, *alphae_y_PML_1, *sige_y_PML_1, *kappae_y_PML_1;$/;"	v
be_y_2	src/cpml.h	/^    data1d<type1> be_y_2, ce_y_2, alphae_y_PML_2, sige_y_PML_2, kappae_y_PML_2;$/;"	m	class:cpml
be_y_2	test/testMain.cpp	/^float *be_y_2, *ce_y_2, *alphae_y_PML_2, *sige_y_PML_2, *kappae_y_PML_2;$/;"	v
be_z_1	src/cpml.h	/^    data1d<type1> be_z_1, ce_z_1, alphae_z_PML_1, sige_z_PML_1, kappae_z_PML_1;$/;"	m	class:cpml
be_z_1	test/testMain.cpp	/^float *be_z_1, *ce_z_1, *alphae_z_PML_1, *sige_z_PML_1, *kappae_z_PML_1;$/;"	v
be_z_2	src/cpml.h	/^    data1d<type1> be_z_2, ce_z_2, alphae_z_PML_2, sige_z_PML_2, kappae_z_PML_2;$/;"	m	class:cpml
be_z_2	test/testMain.cpp	/^float *be_z_2, *ce_z_2, *alphae_z_PML_2, *sige_z_PML_2, *kappae_z_PML_2;$/;"	v
beta	src/fdtd.h	/^    data3d<MyDataF> beta;$/;"	m	class:fdtd
bh_x_1	src/cpml.h	/^    data1d<type1> bh_x_1, ch_x_1, alphah_x_PML_1, sigh_x_PML_1, kappah_x_PML_1;$/;"	m	class:cpml
bh_x_1	test/testMain.cpp	/^float *bh_x_1, *ch_x_1, *alphah_x_PML_1, *sigh_x_PML_1, *kappah_x_PML_1;$/;"	v
bh_x_2	src/cpml.h	/^    data1d<type1> bh_x_2, ch_x_2, alphah_x_PML_2, sigh_x_PML_2, kappah_x_PML_2;$/;"	m	class:cpml
bh_x_2	test/testMain.cpp	/^float *bh_x_2, *ch_x_2, *alphah_x_PML_2, *sigh_x_PML_2, *kappah_x_PML_2;$/;"	v
bh_y_1	src/cpml.h	/^    data1d<type1> bh_y_1, ch_y_1, alphah_y_PML_1, sigh_y_PML_1, kappah_y_PML_1;$/;"	m	class:cpml
bh_y_1	test/testMain.cpp	/^float *bh_y_1, *ch_y_1, *alphah_y_PML_1, *sigh_y_PML_1, *kappah_y_PML_1;$/;"	v
bh_y_2	src/cpml.h	/^    data1d<type1> bh_y_2, ch_y_2, alphah_y_PML_2, sigh_y_PML_2, kappah_y_PML_2;$/;"	m	class:cpml
bh_y_2	test/testMain.cpp	/^float *bh_y_2, *ch_y_2, *alphah_y_PML_2, *sigh_y_PML_2, *kappah_y_PML_2;$/;"	v
bh_z_1	src/cpml.h	/^    data1d<type1> bh_z_1, ch_z_1, alphah_z_PML_1, sigh_z_PML_1, kappah_z_PML_1;$/;"	m	class:cpml
bh_z_1	test/testMain.cpp	/^float *bh_z_1, *ch_z_1, *alphah_z_PML_1, *sigh_z_PML_1, *kappah_z_PML_1;$/;"	v
bh_z_2	src/cpml.h	/^    data1d<type1> bh_z_2, ch_z_2, alphah_z_PML_2, sigh_z_PML_2, kappah_z_PML_2;$/;"	m	class:cpml
bh_z_2	test/testMain.cpp	/^float *bh_z_2, *ch_z_2, *alphah_z_PML_2, *sigh_z_PML_2, *kappah_z_PML_2;$/;"	v
buildDipole	src/fdtd.cpp	/^void fdtd::buildDipole() {$/;"	f	class:fdtd
buildDipole	test/testMain.cpp	/^void buildDipole() {$/;"	f
buildDipole	test/testcpml.cpp	/^void buildDipole() {$/;"	f
buildObject	src/fdtd.cpp	/^void fdtd::buildObject() {$/;"	f	class:fdtd
buildObject	test/testMain.cpp	/^void buildObject() {$/;"	f
buildObject	test/testcpml.cpp	/^void buildObject() {$/;"	f
buildSphere	src/fdtd.cpp	/^void fdtd::buildSphere() {$/;"	f	class:fdtd
buildSphere	test/testMain.cpp	/^void buildSphere() {$/;"	f
buildSphere	test/testcpml.cpp	/^void buildSphere() {$/;"	f
ce_x_1	src/cpml.h	/^    data1d<type1> be_x_1, ce_x_1, alphae_x_PML_1, sige_x_PML_1, kappae_x_PML_1;$/;"	m	class:cpml
ce_x_1	test/testMain.cpp	/^float *be_x_1, *ce_x_1, *alphae_x_PML_1, *sige_x_PML_1, *kappae_x_PML_1;$/;"	v
ce_x_2	src/cpml.h	/^    data1d<type1> be_x_2, ce_x_2, alphae_x_PML_2, sige_x_PML_2, kappae_x_PML_2;$/;"	m	class:cpml
ce_x_2	test/testMain.cpp	/^float *be_x_2, *ce_x_2, *alphae_x_PML_2, *sige_x_PML_2, *kappae_x_PML_2;$/;"	v
ce_y_1	src/cpml.h	/^    data1d<type1> be_y_1, ce_y_1, alphae_y_PML_1, sige_y_PML_1, kappae_y_PML_1;$/;"	m	class:cpml
ce_y_1	test/testMain.cpp	/^float *be_y_1, *ce_y_1, *alphae_y_PML_1, *sige_y_PML_1, *kappae_y_PML_1;$/;"	v
ce_y_2	src/cpml.h	/^    data1d<type1> be_y_2, ce_y_2, alphae_y_PML_2, sige_y_PML_2, kappae_y_PML_2;$/;"	m	class:cpml
ce_y_2	test/testMain.cpp	/^float *be_y_2, *ce_y_2, *alphae_y_PML_2, *sige_y_PML_2, *kappae_y_PML_2;$/;"	v
ce_z_1	src/cpml.h	/^    data1d<type1> be_z_1, ce_z_1, alphae_z_PML_1, sige_z_PML_1, kappae_z_PML_1;$/;"	m	class:cpml
ce_z_1	test/testMain.cpp	/^float *be_z_1, *ce_z_1, *alphae_z_PML_1, *sige_z_PML_1, *kappae_z_PML_1;$/;"	v
ce_z_2	src/cpml.h	/^    data1d<type1> be_z_2, ce_z_2, alphae_z_PML_2, sige_z_PML_2, kappae_z_PML_2;$/;"	m	class:cpml
ce_z_2	test/testMain.cpp	/^float *be_z_2, *ce_z_2, *alphae_z_PML_2, *sige_z_PML_2, *kappae_z_PML_2;$/;"	v
ch_x_1	src/cpml.h	/^    data1d<type1> bh_x_1, ch_x_1, alphah_x_PML_1, sigh_x_PML_1, kappah_x_PML_1;$/;"	m	class:cpml
ch_x_1	test/testMain.cpp	/^float *bh_x_1, *ch_x_1, *alphah_x_PML_1, *sigh_x_PML_1, *kappah_x_PML_1;$/;"	v
ch_x_2	src/cpml.h	/^    data1d<type1> bh_x_2, ch_x_2, alphah_x_PML_2, sigh_x_PML_2, kappah_x_PML_2;$/;"	m	class:cpml
ch_x_2	test/testMain.cpp	/^float *bh_x_2, *ch_x_2, *alphah_x_PML_2, *sigh_x_PML_2, *kappah_x_PML_2;$/;"	v
ch_y_1	src/cpml.h	/^    data1d<type1> bh_y_1, ch_y_1, alphah_y_PML_1, sigh_y_PML_1, kappah_y_PML_1;$/;"	m	class:cpml
ch_y_1	test/testMain.cpp	/^float *bh_y_1, *ch_y_1, *alphah_y_PML_1, *sigh_y_PML_1, *kappah_y_PML_1;$/;"	v
ch_y_2	src/cpml.h	/^    data1d<type1> bh_y_2, ch_y_2, alphah_y_PML_2, sigh_y_PML_2, kappah_y_PML_2;$/;"	m	class:cpml
ch_y_2	test/testMain.cpp	/^float *bh_y_2, *ch_y_2, *alphah_y_PML_2, *sigh_y_PML_2, *kappah_y_PML_2;$/;"	v
ch_z_1	src/cpml.h	/^    data1d<type1> bh_z_1, ch_z_1, alphah_z_PML_1, sigh_z_PML_1, kappah_z_PML_1;$/;"	m	class:cpml
ch_z_1	test/testMain.cpp	/^float *bh_z_1, *ch_z_1, *alphah_z_PML_1, *sigh_z_PML_1, *kappah_z_PML_1;$/;"	v
ch_z_2	src/cpml.h	/^    data1d<type1> bh_z_2, ch_z_2, alphah_z_PML_2, sigh_z_PML_2, kappah_z_PML_2;$/;"	m	class:cpml
ch_z_2	test/testMain.cpp	/^float *bh_z_2, *ch_z_2, *alphah_z_PML_2, *sigh_z_PML_2, *kappah_z_PML_2;$/;"	v
check	src/inputChecker.cpp	/^void inputChecker::check() {$/;"	f	class:inputChecker
checkReturnCode	nbproject/Package-Default.bash	/^function checkReturnCode$/;"	f
cnt	src/datastruct.cpp	/^template<class DataType> unsigned int data3d<DataType>::cnt = 0;$/;"	m	class:data3d	file:
cnt	src/datastruct.h	/^    static unsigned int cnt;$/;"	m	class:data3d
compute	src/fdtd.cpp	/^void fdtd::compute() {$/;"	f	class:fdtd
compute	test/testMain.cpp	/^void compute() {$/;"	f
compute	test/testcpml.cpp	/^void compute() {$/;"	f
copyFileToTmpDir	nbproject/Package-Default.bash	/^function copyFileToTmpDir$/;"	f
cpml	src/cpml.h	/^    cpml() {$/;"	f	class:cpml
cpml	src/cpml.h	/^    cpml(const cpml<type1, type2>& orig) {$/;"	f	class:cpml
cpml	src/cpml.h	/^class cpml {$/;"	c
createArray	src/datastruct.h	/^    void createArray(unsigned num) {$/;"	f	class:data1d
createArray	src/datastruct.h	/^    void createArray(unsigned num, T val) {$/;"	f	class:data1d
createCBKAP	src/cpml.h	/^    void createCBKAP() {$/;"	f	class:cpml
createCPMLArray	src/cpml.h	/^    void createCPMLArray() {$/;"	f	class:cpml
createCoeff	src/fdtd.cpp	/^void fdtd::createCoeff() {$/;"	f	class:fdtd
createDen	src/cpml.h	/^    void createDen() {$/;"	f	class:cpml
createPsi	src/cpml.h	/^    void createPsi() {$/;"	f	class:cpml
data1d	src/datastruct.h	/^    data1d() : p(NULL), n(0) {$/;"	f	class:data1d
data1d	src/datastruct.h	/^    data1d(const data1d& orig) {$/;"	f	class:data1d
data1d	src/datastruct.h	/^    data1d(unsigned num, T val = 0) : p(NULL), n(num) {$/;"	f	class:data1d
data1d	src/datastruct.h	/^class data1d {$/;"	c
data3d	src/datastruct.cpp	/^data3d<DataType>::data3d(const data3d< DataType >& obj) : p(NULL) {$/;"	f	class:data3d
data3d	src/datastruct.h	/^    data3d() : nx(0), ny(0), nz(0), p(NULL) {$/;"	f	class:data3d
data3d	src/datastruct.h	/^    data3d(unsigned int cx, unsigned int cy, unsigned cz)$/;"	f	class:data3d
data3d	src/datastruct.h	/^class data3d {$/;"	c
den_ex	src/cpml.h	/^    data1d<type1> den_ex;$/;"	m	class:cpml
den_ex	test/testMain.cpp	/^float *den_ex;$/;"	v
den_ey	src/cpml.h	/^    data1d<type1> den_ey;$/;"	m	class:cpml
den_ey	test/testMain.cpp	/^float *den_ey;$/;"	v
den_ez	src/cpml.h	/^    data1d<type1> den_ez;$/;"	m	class:cpml
den_ez	test/testMain.cpp	/^float *den_ez;$/;"	v
den_hx	src/cpml.h	/^    data1d<type1> den_hx;$/;"	m	class:cpml
den_hx	test/testMain.cpp	/^float *den_hx;$/;"	v
den_hy	src/cpml.h	/^    data1d<type1> den_hy;$/;"	m	class:cpml
den_hy	test/testMain.cpp	/^float *den_hy;$/;"	v
den_hz	src/cpml.h	/^    data1d<type1> den_hz;$/;"	m	class:cpml
den_hz	test/testMain.cpp	/^float *den_hz;$/;"	v
doMatlabSimulation	src/fdtd.cpp	/^void fdtd::doMatlabSimulation() {$/;"	f	class:fdtd
dsf	src/fdtd.h	/^    MyDataF dsf;$/;"	m	class:fdtd
dt	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dt	test/testMain.cpp	/^double dt;$/;"	v
dt	test/testcpml.cpp	/^double dt;$/;"	v
dtf	src/fdtd.h	/^    MyDataF dtf;$/;"	m	class:fdtd
dx	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dx	src/hpw3d.cpp	/^MyDataF dx, dy, dz;$/;"	v
dx	test/gaussian.cpp	/^MyDataF dx, dy, dz;$/;"	v
dx	test/sine.cpp	/^MyDataF dx, dy, dz;$/;"	v
dx	test/testMain.cpp	/^double dx = 50.0E-3;$/;"	v
dx	test/testcpml.cpp	/^double dx = 1.0E-3;$/;"	v
dy	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dy	src/hpw3d.cpp	/^MyDataF dx, dy, dz;$/;"	v
dy	test/gaussian.cpp	/^MyDataF dx, dy, dz;$/;"	v
dy	test/sine.cpp	/^MyDataF dx, dy, dz;$/;"	v
dy	test/testMain.cpp	/^double dy = 50.0E-3;$/;"	v
dy	test/testcpml.cpp	/^double dy = 1.0E-3;$/;"	v
dz	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dz	src/hpw3d.cpp	/^MyDataF dx, dy, dz;$/;"	v
dz	test/gaussian.cpp	/^MyDataF dx, dy, dz;$/;"	v
dz	test/sine.cpp	/^MyDataF dx, dy, dz;$/;"	v
dz	test/testMain.cpp	/^double dz = 50.0E-3; \/\/ cell size in each direction$/;"	v
dz	test/testcpml.cpp	/^double dz = 1.0E-3; \/\/ cell size in each direction$/;"	v
e	src/common.h	/^const MyDataF e = 1.602e-19; \/\/ electricity charge$/;"	v
ep	src/datastruct.cpp	/^template<class DataType> Engine* data3d<DataType>::ep = NULL;$/;"	m	class:data3d	file:
ep	src/datastruct.h	/^    static Engine *ep;$/;"	m	class:data3d
epsR	src/hpw3d.cpp	/^MyDataF epsR;$/;"	v
epsR	test/gaussian.cpp	/^MyDataF epsR;$/;"	v
epsR	test/sine.cpp	/^MyDataF epsR;$/;"	v
epsR	test/testMain.cpp	/^double epsR = 1.0; \/\/free space$/;"	v
epsR	test/testcpml.cpp	/^double epsR = 1.0; \/\/free space$/;"	v
eps_0	src/common.h	/^const MyDataF eps_0 = 1.0 \/ (C * C * mu_0);$/;"	v
eps_0	test/testMain.cpp	/^double eps_0;$/;"	v
epsilon	src/fdtd.h	/^    MyDataF *epsilon;$/;"	m	class:fdtd
epsilon	test/testMain.cpp	/^double *epsilon;$/;"	v
epsilon	test/testcpml.cpp	/^double *epsilon;$/;"	v
fdtd	src/fdtd.cpp	/^fdtd::fdtd(unsigned _nmax, unsigned _imax, unsigned _jmax, unsigned _kmax,$/;"	f	class:fdtd
fdtd	src/fdtd.h	/^class fdtd {$/;"	c
finishMatlabSimulation	src/fdtd.cpp	/^void fdtd::finishMatlabSimulation() {$/;"	f	class:fdtd
frequency	src/inputChecker.h	/^    double frequency;$/;"	m	class:inputChecker
fun	matlab scripts/fun.m	/^function y=fun(t,r,amp,t0,tw,mu,C)$/;"	f
gamma	src/fdtd.h	/^    MyDataF gamma;$/;"	m	class:fdtd
getName	src/datastruct.h	/^    string getName(){$/;"	f	class:data3d
help	src/inputChecker.cpp	/^void inputChecker::help(char *prog) {$/;"	f	class:inputChecker
i	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
i	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
ic	test/testcpml.cpp	/^int ic, jc, kc;$/;"	v
iend	src/fdtd.h	/^    unsigned istart, iend, jstart;$/;"	m	class:fdtd
iend	test/testMain.cpp	/^int istart, iend, jstart;$/;"	v
iend	test/testcpml.cpp	/^int istart, iend, jstart;$/;"	v
ii	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
ii	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
initArray	src/datastruct.h	/^    void initArray(T initval = 0) {$/;"	f	class:data1d
initCBKAP	src/cpml.h	/^    void initCBKAP(const type1 dt, const type1 dx, const type1 dy, const type1 dz) {$/;"	f	class:cpml
initCPML	src/cpml.h	/^    void initCPML(const type1 dt, const type1 dx, const type1 dy, const type1 dz) {$/;"	f	class:cpml
initCoeff	src/fdtd.cpp	/^void fdtd::initCoeff() {$/;"	f	class:fdtd
initComData	test/gaussian.cpp	/^void initComData() {$/;"	f
initComData	test/sine.cpp	/^void initComData() {$/;"	f
initDen	src/cpml.h	/^    void initDen(const type1 dt, const type1 dx, const type1 dy, const type1 dz) {$/;"	f	class:cpml
initDensity	src/fdtd.cpp	/^void fdtd::initDensity() {$/;"	f	class:fdtd
initMatlabSimulation	src/fdtd.cpp	/^int fdtd::initMatlabSimulation() {$/;"	f	class:fdtd
initParmeters	src/cpml.h	/^    void initParmeters(const type1 dx, const type1 dy, const type1 dz, unsigned m_, unsigned ma_) {$/;"	f	class:cpml
initialize	src/fdtd.cpp	/^void fdtd::initialize() {$/;"	f	class:fdtd
initialize	test/testMain.cpp	/^void initialize() {$/;"	f
initialize	test/testcpml.cpp	/^void initialize() {$/;"	f
initializeCPML	test/testMain.cpp	/^void initializeCPML() {$/;"	f
initializeCPML	test/testcpml.cpp	/^void initializeCPML() {$/;"	f
inputChecker	src/inputChecker.cpp	/^inputChecker::inputChecker() :$/;"	f	class:inputChecker
inputChecker	src/inputChecker.cpp	/^inputChecker::inputChecker(const inputChecker& orig) {$/;"	f	class:inputChecker
inputChecker	src/inputChecker.h	/^class inputChecker {$/;"	c
isMatlabEngineStarted	src/datastruct.cpp	/^template<class DataType> bool data3d<DataType>::isMatlabEngineStarted = false;$/;"	m	class:data3d	file:
isMatlabEngineStarted	src/datastruct.h	/^    static bool isMatlabEngineStarted;$/;"	m	class:data3d
isp	src/fdtd.h	/^    unsigned isp, jsp, ksp;$/;"	m	class:fdtd
istart	src/fdtd.h	/^    unsigned istart, iend, jstart;$/;"	m	class:fdtd
istart	test/testMain.cpp	/^int istart, iend, jstart;$/;"	v
istart	test/testcpml.cpp	/^int istart, iend, jstart;$/;"	v
j	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
j	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
jc	test/testcpml.cpp	/^int ic, jc, kc;$/;"	v
jend	src/fdtd.h	/^    unsigned jend, kstart, kend;$/;"	m	class:fdtd
jend	test/testMain.cpp	/^int jend, kstart, kend;$/;"	v
jend	test/testcpml.cpp	/^int jend, kstart, kend;$/;"	v
jj	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
jj	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
jsp	src/fdtd.h	/^    unsigned isp, jsp, ksp;$/;"	m	class:fdtd
jstart	src/fdtd.h	/^    unsigned istart, iend, jstart;$/;"	m	class:fdtd
jstart	test/testMain.cpp	/^int istart, iend, jstart;$/;"	v
jstart	test/testcpml.cpp	/^int istart, iend, jstart;$/;"	v
k	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
k	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
kappa_x_max	src/cpml.h	/^    type1 kappa_x_max;$/;"	m	class:cpml
kappa_x_max	test/testMain.cpp	/^double kappa_x_max;$/;"	v
kappa_y_max	src/cpml.h	/^    type1 kappa_y_max;$/;"	m	class:cpml
kappa_y_max	test/testMain.cpp	/^double kappa_y_max;$/;"	v
kappa_z_max	src/cpml.h	/^    type1 kappa_z_max;$/;"	m	class:cpml
kappa_z_max	test/testMain.cpp	/^double kappa_z_max;$/;"	v
kappae_x_PML_1	src/cpml.h	/^    data1d<type1> be_x_1, ce_x_1, alphae_x_PML_1, sige_x_PML_1, kappae_x_PML_1;$/;"	m	class:cpml
kappae_x_PML_1	test/testMain.cpp	/^float *be_x_1, *ce_x_1, *alphae_x_PML_1, *sige_x_PML_1, *kappae_x_PML_1;$/;"	v
kappae_x_PML_2	src/cpml.h	/^    data1d<type1> be_x_2, ce_x_2, alphae_x_PML_2, sige_x_PML_2, kappae_x_PML_2;$/;"	m	class:cpml
kappae_x_PML_2	test/testMain.cpp	/^float *be_x_2, *ce_x_2, *alphae_x_PML_2, *sige_x_PML_2, *kappae_x_PML_2;$/;"	v
kappae_y_PML_1	src/cpml.h	/^    data1d<type1> be_y_1, ce_y_1, alphae_y_PML_1, sige_y_PML_1, kappae_y_PML_1;$/;"	m	class:cpml
kappae_y_PML_1	test/testMain.cpp	/^float *be_y_1, *ce_y_1, *alphae_y_PML_1, *sige_y_PML_1, *kappae_y_PML_1;$/;"	v
kappae_y_PML_2	src/cpml.h	/^    data1d<type1> be_y_2, ce_y_2, alphae_y_PML_2, sige_y_PML_2, kappae_y_PML_2;$/;"	m	class:cpml
kappae_y_PML_2	test/testMain.cpp	/^float *be_y_2, *ce_y_2, *alphae_y_PML_2, *sige_y_PML_2, *kappae_y_PML_2;$/;"	v
kappae_z_PML_1	src/cpml.h	/^    data1d<type1> be_z_1, ce_z_1, alphae_z_PML_1, sige_z_PML_1, kappae_z_PML_1;$/;"	m	class:cpml
kappae_z_PML_1	test/testMain.cpp	/^float *be_z_1, *ce_z_1, *alphae_z_PML_1, *sige_z_PML_1, *kappae_z_PML_1;$/;"	v
kappae_z_PML_2	src/cpml.h	/^    data1d<type1> be_z_2, ce_z_2, alphae_z_PML_2, sige_z_PML_2, kappae_z_PML_2;$/;"	m	class:cpml
kappae_z_PML_2	test/testMain.cpp	/^float *be_z_2, *ce_z_2, *alphae_z_PML_2, *sige_z_PML_2, *kappae_z_PML_2;$/;"	v
kappah_x_PML_1	src/cpml.h	/^    data1d<type1> bh_x_1, ch_x_1, alphah_x_PML_1, sigh_x_PML_1, kappah_x_PML_1;$/;"	m	class:cpml
kappah_x_PML_1	test/testMain.cpp	/^float *bh_x_1, *ch_x_1, *alphah_x_PML_1, *sigh_x_PML_1, *kappah_x_PML_1;$/;"	v
kappah_x_PML_2	src/cpml.h	/^    data1d<type1> bh_x_2, ch_x_2, alphah_x_PML_2, sigh_x_PML_2, kappah_x_PML_2;$/;"	m	class:cpml
kappah_x_PML_2	test/testMain.cpp	/^float *bh_x_2, *ch_x_2, *alphah_x_PML_2, *sigh_x_PML_2, *kappah_x_PML_2;$/;"	v
kappah_y_PML_1	src/cpml.h	/^    data1d<type1> bh_y_1, ch_y_1, alphah_y_PML_1, sigh_y_PML_1, kappah_y_PML_1;$/;"	m	class:cpml
kappah_y_PML_1	test/testMain.cpp	/^float *bh_y_1, *ch_y_1, *alphah_y_PML_1, *sigh_y_PML_1, *kappah_y_PML_1;$/;"	v
kappah_y_PML_2	src/cpml.h	/^    data1d<type1> bh_y_2, ch_y_2, alphah_y_PML_2, sigh_y_PML_2, kappah_y_PML_2;$/;"	m	class:cpml
kappah_y_PML_2	test/testMain.cpp	/^float *bh_y_2, *ch_y_2, *alphah_y_PML_2, *sigh_y_PML_2, *kappah_y_PML_2;$/;"	v
kappah_z_PML_1	src/cpml.h	/^    data1d<type1> bh_z_1, ch_z_1, alphah_z_PML_1, sigh_z_PML_1, kappah_z_PML_1;$/;"	m	class:cpml
kappah_z_PML_1	test/testMain.cpp	/^float *bh_z_1, *ch_z_1, *alphah_z_PML_1, *sigh_z_PML_1, *kappah_z_PML_1;$/;"	v
kappah_z_PML_2	src/cpml.h	/^    data1d<type1> bh_z_2, ch_z_2, alphah_z_PML_2, sigh_z_PML_2, kappah_z_PML_2;$/;"	m	class:cpml
kappah_z_PML_2	test/testMain.cpp	/^float *bh_z_2, *ch_z_2, *alphah_z_PML_2, *sigh_z_PML_2, *kappah_z_PML_2;$/;"	v
kc	test/testcpml.cpp	/^int ic, jc, kc;$/;"	v
kend	src/fdtd.h	/^    unsigned jend, kstart, kend;$/;"	m	class:fdtd
kend	test/testMain.cpp	/^int jend, kstart, kend;$/;"	v
kend	test/testcpml.cpp	/^int jend, kstart, kend;$/;"	v
kk	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
kk	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
ksource	src/fdtd.h	/^    unsigned ksource;$/;"	m	class:fdtd
ksource	test/testMain.cpp	/^int ksource = 12;$/;"	v
ksource	test/testcpml.cpp	/^int ksource = 12;$/;"	v
ksp	src/fdtd.h	/^    unsigned isp, jsp, ksp;$/;"	m	class:fdtd
kstart	src/fdtd.h	/^    unsigned jend, kstart, kend;$/;"	m	class:fdtd
kstart	test/testMain.cpp	/^int jend, kstart, kend;$/;"	v
kstart	test/testcpml.cpp	/^int jend, kstart, kend;$/;"	v
m	src/cpml.h	/^    int m, ma;$/;"	m	class:cpml
m	src/fdtd.h	/^    unsigned m;$/;"	m	class:fdtd
m	test/testMain.cpp	/^int m = 4, ma = 1;$/;"	v
m	test/testcpml.cpp	/^int m = 3, ma = 1;$/;"	v
ma	src/cpml.h	/^    int m, ma;$/;"	m	class:cpml
ma	src/fdtd.h	/^    unsigned ma;$/;"	m	class:fdtd
ma	test/testMain.cpp	/^int m = 4, ma = 1;$/;"	v
ma	test/testcpml.cpp	/^int m = 3, ma = 1;$/;"	v
main	src/hpw3d.cpp	/^int main(int argc, char*argv[]) {$/;"	f
main	test/gaussian.cpp	/^int main(int argc, char*argv[]) {$/;"	f
main	test/openmp.cpp	/^int main(){$/;"	f
main	test/sine.cpp	/^int main(int argc, char*argv[]) {$/;"	f
main	test/testMain.cpp	/^int main() {$/;"	f
main	test/testcpml.cpp	/^int main() {$/;"	f
makeDirectory	nbproject/Package-Default.bash	/^function makeDirectory$/;"	f
makeomovie	matlab scripts/makeomovie.m	/^function makeomovie(movname,varhead,file,figname,islog,step)$/;"	f
me	src/common.h	/^const MyDataF me = 9.110e-31; \/\/ electricity mass$/;"	v
mu	src/fdtd.h	/^    MyDataF *mu;$/;"	m	class:fdtd
mu	test/testMain.cpp	/^double *mu;$/;"	v
mu	test/testcpml.cpp	/^double *mu;$/;"	v
mu_0	src/common.h	/^const MyDataF mu_0 = 4.0 * M_PI * 1.0E-7;$/;"	v
mu_0	test/testMain.cpp	/^double mu_0;$/;"	v
mu_e	src/fdtd.h	/^    MyDataF mu_e;$/;"	m	class:fdtd
mu_i	src/fdtd.h	/^    MyDataF mu_i;$/;"	m	class:fdtd
n	src/datastruct.h	/^    unsigned n;$/;"	m	class:data1d
n	test/testMain.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
n	test/testcpml.cpp	/^int i, j, ii, jj, k, kk, n;$/;"	v
nMax	src/fdtd.h	/^    unsigned nMax; \/\/ total number of time steps$/;"	m	class:fdtd
nMax	test/testMain.cpp	/^int nMax = 500; \/\/ total number of time steps$/;"	v
nMax	test/testcpml.cpp	/^int nMax = 500; \/\/ total number of time steps$/;"	v
name	src/datastruct.h	/^    std::string name;$/;"	m	class:data3d
nanOperator	src/datastruct.cpp	/^void data3d<DataType>::nanOperator(unsigned i,unsigned j,unsigned k){$/;"	f	class:data3d
neGrid	src/fdtd.h	/^    unsigned neGrid;$/;"	m	class:fdtd
neSkipStep	src/fdtd.h	/^    int neSkipStep;$/;"	m	class:fdtd
niutype	src/fdtd.h	/^    int niutype;$/;"	m	class:fdtd
num	src/datastruct.h	/^    mxArray *num;$/;"	m	class:data3d
numMaterials	src/fdtd.h	/^    unsigned numMaterials;$/;"	m	class:fdtd
numMaterials	test/testMain.cpp	/^int numMaterials = 50;$/;"	v
numMaterials	test/testcpml.cpp	/^int numMaterials = 50;$/;"	v
nx	src/datastruct.h	/^    unsigned int nx;$/;"	m	class:data3d
nxPML_1	src/cpml.h	/^    unsigned nxPML_1, nxPML_2, nyPML_1;$/;"	m	class:cpml
nxPML_1	test/testMain.cpp	/^int nxPML_1, nxPML_2, nyPML_1;$/;"	v
nxPML_2	src/cpml.h	/^    unsigned nxPML_1, nxPML_2, nyPML_1;$/;"	m	class:cpml
nxPML_2	test/testMain.cpp	/^int nxPML_1, nxPML_2, nyPML_1;$/;"	v
ny	src/datastruct.h	/^    unsigned int ny;$/;"	m	class:data3d
nyPML_1	src/cpml.h	/^    unsigned nxPML_1, nxPML_2, nyPML_1;$/;"	m	class:cpml
nyPML_1	test/testMain.cpp	/^int nxPML_1, nxPML_2, nyPML_1;$/;"	v
nyPML_2	src/cpml.h	/^    unsigned nyPML_2, nzPML_1, nzPML_2;$/;"	m	class:cpml
nyPML_2	test/testMain.cpp	/^int nyPML_2, nzPML_1, nzPML_2;$/;"	v
nz	src/datastruct.h	/^    unsigned int nz;$/;"	m	class:data3d
nzPML_1	src/cpml.h	/^    unsigned nyPML_2, nzPML_1, nzPML_2;$/;"	m	class:cpml
nzPML_1	test/testMain.cpp	/^int nyPML_2, nzPML_1, nzPML_2;$/;"	v
nzPML_2	src/cpml.h	/^    unsigned nyPML_2, nzPML_1, nzPML_2;$/;"	m	class:cpml
nzPML_2	test/testMain.cpp	/^int nyPML_2, nzPML_1, nzPML_2;$/;"	v
omega	src/fdtd.h	/^    MyDataF omega; \/\/wave angle frequency$/;"	m	class:fdtd
omega	src/hpw3d.cpp	/^MyDataF omega;$/;"	v
omega	test/gaussian.cpp	/^MyDataF omega;$/;"	v
omega	test/sine.cpp	/^MyDataF omega;$/;"	v
omega	test/testMain.cpp	/^float omega;$/;"	v
operator =	src/datastruct.cpp	/^void data3d<DataType>::operator =(data3d< DataType > const &other) {$/;"	f	class:data3d
p	src/datastruct.h	/^    DataType*** p;$/;"	m	class:data3d
p	src/datastruct.h	/^    T* p;$/;"	m	class:data1d
p	src/fdtd.h	/^    MyDataF p; \/\/ air pressure$/;"	m	class:fdtd
pMyDataF	src/common.h	/^typedef MyDataF* pMyDataF;$/;"	t
parseInput	src/inputChecker.cpp	/^void inputChecker::parseInput(int argc, char *argv[]) {$/;"	f	class:inputChecker
pi	test/testMain.cpp	/^double pi = 3.14159265358979;$/;"	v
pml	src/fdtd.h	/^    cpml<MyDataF, unsigned int> pml;$/;"	m	class:fdtd
pml	test/testcpml.cpp	/^cpml<MyDataF, short> pml;$/;"	v
pmlSize	src/inputChecker.h	/^    int pmlSize;$/;"	m	class:inputChecker
pmlWith	src/fdtd.h	/^    unsigned pmlWith;$/;"	m	class:fdtd
pmlw	src/hpw3d.cpp	/^unsigned pmlw;$/;"	v
pmlw	test/gaussian.cpp	/^unsigned pmlw;$/;"	v
pmlw	test/sine.cpp	/^unsigned pmlw;$/;"	v
ppMyDataF	src/common.h	/^typedef pMyDataF* ppMyDataF;$/;"	t
print	src/inputChecker.cpp	/^void inputChecker::print() {$/;"	f	class:inputChecker
printf	src/datastruct.h	33;"	d
projects	Makefile	/^projects=$(TEST) hpw3d#3DFormulaTransforming.pdf$/;"	m
psi_Exy_1	src/cpml.h	/^    data3d<type1> psi_Exy_1;$/;"	m	class:cpml
psi_Exy_1	test/testMain.cpp	/^float ***psi_Exy_1;$/;"	v
psi_Exy_2	src/cpml.h	/^    data3d<type1> psi_Exy_2;$/;"	m	class:cpml
psi_Exy_2	test/testMain.cpp	/^float ***psi_Exy_2;$/;"	v
psi_Exz_1	src/cpml.h	/^    data3d<type1> psi_Exz_1;$/;"	m	class:cpml
psi_Exz_1	test/testMain.cpp	/^float ***psi_Exz_1;$/;"	v
psi_Exz_2	src/cpml.h	/^    data3d<type1> psi_Exz_2;$/;"	m	class:cpml
psi_Exz_2	test/testMain.cpp	/^float ***psi_Exz_2;$/;"	v
psi_Eyx_1	src/cpml.h	/^    data3d<type1> psi_Eyx_1;$/;"	m	class:cpml
psi_Eyx_1	test/testMain.cpp	/^float ***psi_Eyx_1;$/;"	v
psi_Eyx_2	src/cpml.h	/^    data3d<type1> psi_Eyx_2;$/;"	m	class:cpml
psi_Eyx_2	test/testMain.cpp	/^float ***psi_Eyx_2;$/;"	v
psi_Eyz_1	src/cpml.h	/^    data3d<type1> psi_Eyz_1;$/;"	m	class:cpml
psi_Eyz_1	test/testMain.cpp	/^float ***psi_Eyz_1;$/;"	v
psi_Eyz_2	src/cpml.h	/^    data3d<type1> psi_Eyz_2;$/;"	m	class:cpml
psi_Eyz_2	test/testMain.cpp	/^float ***psi_Eyz_2;$/;"	v
psi_Ezx_1	src/cpml.h	/^    data3d<type1> psi_Ezx_1;$/;"	m	class:cpml
psi_Ezx_1	test/testMain.cpp	/^float ***psi_Ezx_1;$/;"	v
psi_Ezx_2	src/cpml.h	/^    data3d<type1> psi_Ezx_2;$/;"	m	class:cpml
psi_Ezx_2	test/testMain.cpp	/^float ***psi_Ezx_2;$/;"	v
psi_Ezy_1	src/cpml.h	/^    data3d<type1> psi_Ezy_1;$/;"	m	class:cpml
psi_Ezy_1	test/testMain.cpp	/^float ***psi_Ezy_1;$/;"	v
psi_Ezy_2	src/cpml.h	/^    data3d<type1> psi_Ezy_2;$/;"	m	class:cpml
psi_Ezy_2	test/testMain.cpp	/^float ***psi_Ezy_2;$/;"	v
psi_Hxy_1	src/cpml.h	/^    data3d<type1> psi_Hxy_1;$/;"	m	class:cpml
psi_Hxy_1	test/testMain.cpp	/^float ***psi_Hxy_1;$/;"	v
psi_Hxy_2	src/cpml.h	/^    data3d<type1> psi_Hxy_2;$/;"	m	class:cpml
psi_Hxy_2	test/testMain.cpp	/^float ***psi_Hxy_2;$/;"	v
psi_Hxz_1	src/cpml.h	/^    data3d<type1> psi_Hxz_1;$/;"	m	class:cpml
psi_Hxz_1	test/testMain.cpp	/^float ***psi_Hxz_1;$/;"	v
psi_Hxz_2	src/cpml.h	/^    data3d<type1> psi_Hxz_2;$/;"	m	class:cpml
psi_Hxz_2	test/testMain.cpp	/^float ***psi_Hxz_2;$/;"	v
psi_Hyx_1	src/cpml.h	/^    data3d<type1> psi_Hyx_1;$/;"	m	class:cpml
psi_Hyx_1	test/testMain.cpp	/^float ***psi_Hyx_1;$/;"	v
psi_Hyx_2	src/cpml.h	/^    data3d<type1> psi_Hyx_2;$/;"	m	class:cpml
psi_Hyx_2	test/testMain.cpp	/^float ***psi_Hyx_2;$/;"	v
psi_Hyz_1	src/cpml.h	/^    data3d<type1> psi_Hyz_1;$/;"	m	class:cpml
psi_Hyz_1	test/testMain.cpp	/^float ***psi_Hyz_1;$/;"	v
psi_Hyz_2	src/cpml.h	/^    data3d<type1> psi_Hyz_2;$/;"	m	class:cpml
psi_Hyz_2	test/testMain.cpp	/^float ***psi_Hyz_2;$/;"	v
psi_Hzx_1	src/cpml.h	/^    data3d<type1> psi_Hzx_1;$/;"	m	class:cpml
psi_Hzx_1	test/testMain.cpp	/^float ***psi_Hzx_1;$/;"	v
psi_Hzx_2	src/cpml.h	/^    data3d<type1> psi_Hzx_2;$/;"	m	class:cpml
psi_Hzx_2	test/testMain.cpp	/^float ***psi_Hzx_2;$/;"	v
psi_Hzy_1	src/cpml.h	/^    data3d<type1> psi_Hzy_1;$/;"	m	class:cpml
psi_Hzy_1	test/testMain.cpp	/^float ***psi_Hzy_1;$/;"	v
psi_Hzy_2	src/cpml.h	/^    data3d<type1> psi_Hzy_2;$/;"	m	class:cpml
psi_Hzy_2	test/testMain.cpp	/^float ***psi_Hzy_2;$/;"	v
putvars	src/fdtd.cpp	/^void fdtd::putvars() {$/;"	f	class:fdtd
rei	src/fdtd.h	/^    MyDataF rei;$/;"	m	class:fdtd
resetArray	src/datastruct.h	/^    void resetArray() {$/;"	f	class:data1d
save	src/datastruct.cpp	/^void data3d<DataType>::save(unsigned k, unsigned leap, unsigned step, int type) {$/;"	f	class:data3d
save	src/datastruct.h	/^    void save(const string name) {$/;"	f	class:data1d
save_modulus	src/fdtd.h	/^    unsigned save_modulus;$/;"	m	class:fdtd
save_modulus	test/testMain.cpp	/^int save_modulus = 10;$/;"	v
save_modulus	test/testcpml.cpp	/^int save_modulus = 10;$/;"	v
setName	src/datastruct.h	/^    void setName(const std::string &sn) {$/;"	f	class:data3d
setSourceType	src/fdtd.cpp	/^void fdtd::setSourceType(int sourceType) {$/;"	f	class:fdtd
setUp	src/fdtd.cpp	/^void fdtd::setUp() {$/;"	f	class:fdtd
setUp	test/testMain.cpp	/^void setUp() {$/;"	f
setUp	test/testcpml.cpp	/^void setUp() {$/;"	f
sh	nbproject/Makefile-variables.mk	/^ROOT:sh = test -f nbproject\/private\/Makefile-variables.mk || \\$/;"	m
si	test/testcpml.cpp	/^int si, sj, sk;$/;"	v
sig_x_max	src/cpml.h	/^    type1 sig_x_max;$/;"	m	class:cpml
sig_x_max	test/testMain.cpp	/^double sig_x_max;$/;"	v
sig_y_max	src/cpml.h	/^    type1 sig_y_max;$/;"	m	class:cpml
sig_y_max	test/testMain.cpp	/^double sig_y_max;$/;"	v
sig_z_max	src/cpml.h	/^    type1 sig_z_max;$/;"	m	class:cpml
sig_z_max	test/testMain.cpp	/^double sig_z_max;$/;"	v
sige_x_PML_1	src/cpml.h	/^    data1d<type1> be_x_1, ce_x_1, alphae_x_PML_1, sige_x_PML_1, kappae_x_PML_1;$/;"	m	class:cpml
sige_x_PML_1	test/testMain.cpp	/^float *be_x_1, *ce_x_1, *alphae_x_PML_1, *sige_x_PML_1, *kappae_x_PML_1;$/;"	v
sige_x_PML_2	src/cpml.h	/^    data1d<type1> be_x_2, ce_x_2, alphae_x_PML_2, sige_x_PML_2, kappae_x_PML_2;$/;"	m	class:cpml
sige_x_PML_2	test/testMain.cpp	/^float *be_x_2, *ce_x_2, *alphae_x_PML_2, *sige_x_PML_2, *kappae_x_PML_2;$/;"	v
sige_y_PML_1	src/cpml.h	/^    data1d<type1> be_y_1, ce_y_1, alphae_y_PML_1, sige_y_PML_1, kappae_y_PML_1;$/;"	m	class:cpml
sige_y_PML_1	test/testMain.cpp	/^float *be_y_1, *ce_y_1, *alphae_y_PML_1, *sige_y_PML_1, *kappae_y_PML_1;$/;"	v
sige_y_PML_2	src/cpml.h	/^    data1d<type1> be_y_2, ce_y_2, alphae_y_PML_2, sige_y_PML_2, kappae_y_PML_2;$/;"	m	class:cpml
sige_y_PML_2	test/testMain.cpp	/^float *be_y_2, *ce_y_2, *alphae_y_PML_2, *sige_y_PML_2, *kappae_y_PML_2;$/;"	v
sige_z_PML_1	src/cpml.h	/^    data1d<type1> be_z_1, ce_z_1, alphae_z_PML_1, sige_z_PML_1, kappae_z_PML_1;$/;"	m	class:cpml
sige_z_PML_1	test/testMain.cpp	/^float *be_z_1, *ce_z_1, *alphae_z_PML_1, *sige_z_PML_1, *kappae_z_PML_1;$/;"	v
sige_z_PML_2	src/cpml.h	/^    data1d<type1> be_z_2, ce_z_2, alphae_z_PML_2, sige_z_PML_2, kappae_z_PML_2;$/;"	m	class:cpml
sige_z_PML_2	test/testMain.cpp	/^float *be_z_2, *ce_z_2, *alphae_z_PML_2, *sige_z_PML_2, *kappae_z_PML_2;$/;"	v
sigh_x_PML_1	src/cpml.h	/^    data1d<type1> bh_x_1, ch_x_1, alphah_x_PML_1, sigh_x_PML_1, kappah_x_PML_1;$/;"	m	class:cpml
sigh_x_PML_1	test/testMain.cpp	/^float *bh_x_1, *ch_x_1, *alphah_x_PML_1, *sigh_x_PML_1, *kappah_x_PML_1;$/;"	v
sigh_x_PML_2	src/cpml.h	/^    data1d<type1> bh_x_2, ch_x_2, alphah_x_PML_2, sigh_x_PML_2, kappah_x_PML_2;$/;"	m	class:cpml
sigh_x_PML_2	test/testMain.cpp	/^float *bh_x_2, *ch_x_2, *alphah_x_PML_2, *sigh_x_PML_2, *kappah_x_PML_2;$/;"	v
sigh_y_PML_1	src/cpml.h	/^    data1d<type1> bh_y_1, ch_y_1, alphah_y_PML_1, sigh_y_PML_1, kappah_y_PML_1;$/;"	m	class:cpml
sigh_y_PML_1	test/testMain.cpp	/^float *bh_y_1, *ch_y_1, *alphah_y_PML_1, *sigh_y_PML_1, *kappah_y_PML_1;$/;"	v
sigh_y_PML_2	src/cpml.h	/^    data1d<type1> bh_y_2, ch_y_2, alphah_y_PML_2, sigh_y_PML_2, kappah_y_PML_2;$/;"	m	class:cpml
sigh_y_PML_2	test/testMain.cpp	/^float *bh_y_2, *ch_y_2, *alphah_y_PML_2, *sigh_y_PML_2, *kappah_y_PML_2;$/;"	v
sigh_z_PML_1	src/cpml.h	/^    data1d<type1> bh_z_1, ch_z_1, alphah_z_PML_1, sigh_z_PML_1, kappah_z_PML_1;$/;"	m	class:cpml
sigh_z_PML_1	test/testMain.cpp	/^float *bh_z_1, *ch_z_1, *alphah_z_PML_1, *sigh_z_PML_1, *kappah_z_PML_1;$/;"	v
sigh_z_PML_2	src/cpml.h	/^    data1d<type1> bh_z_2, ch_z_2, alphah_z_PML_2, sigh_z_PML_2, kappah_z_PML_2;$/;"	m	class:cpml
sigh_z_PML_2	test/testMain.cpp	/^float *bh_z_2, *ch_z_2, *alphah_z_PML_2, *sigh_z_PML_2, *kappah_z_PML_2;$/;"	v
sigma	src/fdtd.h	/^    MyDataF *sigma;$/;"	m	class:fdtd
sigma	test/testMain.cpp	/^double *sigma;$/;"	v
sigma	test/testcpml.cpp	/^double *sigma;$/;"	v
sign	src/InonizationFormula.cpp	/^int sign(MyDataF val) {$/;"	f
sj	test/testcpml.cpp	/^int si, sj, sk;$/;"	v
sk	test/testcpml.cpp	/^int si, sj, sk;$/;"	v
source	src/fdtd.h	/^    MyDataF source; \/\/Differentiated Gaussian source    $/;"	m	class:fdtd
source	test/testMain.cpp	/^double source; \/\/Differentiated Gaussian source$/;"	v
source	test/testcpml.cpp	/^double source; \/\/Differentiated Gaussian source$/;"	v
srcType	src/fdtd.h	/^    int srcType;$/;"	m	class:fdtd
t0	src/fdtd.h	/^    MyDataF t0; \/\/delay$/;"	m	class:fdtd
tO	test/testMain.cpp	/^double tO; \/\/delay$/;"	v
tO	test/testcpml.cpp	/^double tO; \/\/delay$/;"	v
tZoneLen	src/inputChecker.h	/^    float tZoneLen;$/;"	m	class:inputChecker
tail	src/datastruct.cpp	/^template<class DataType> string data3d<DataType>::tail = ".dat";$/;"	m	class:data3d	file:
tail	src/datastruct.h	/^    static std::string tail;$/;"	m	class:data3d
threadCount	src/inputChecker.h	/^    int threadCount;$/;"	m	class:inputChecker
thread_count	src/hpw3d.cpp	/^int thread_count = 1;$/;"	v
thread_count	test/gaussian.cpp	/^int thread_count = 1;$/;"	v
thread_count	test/sine.cpp	/^int thread_count = 1;$/;"	v
tw	src/fdtd.h	/^    MyDataF tw; \/\/pulse width$/;"	m	class:fdtd
tw	src/hpw3d.cpp	/^MyDataF tw;$/;"	v
tw	test/gaussian.cpp	/^MyDataF tw;$/;"	v
tw	test/sine.cpp	/^MyDataF tw;$/;"	v
tw	test/testMain.cpp	/^double tw = 2e-9; \/\/pulse width$/;"	v
tw	test/testcpml.cpp	/^double tw = 53.0E-12; \/\/pulse width$/;"	v
updateBeta	src/fdtd.cpp	/^void fdtd::updateBeta() {$/;"	f	class:fdtd
updateCoeff	src/fdtd.cpp	/^void fdtd::updateCoeff() {$/;"	f	class:fdtd
updateCollisionFrequency	src/fdtd.cpp	/^void fdtd::updateCollisionFrequency() {$/;"	f	class:fdtd
updateElectricAndVeloityFields	src/fdtd.cpp	/^void fdtd::updateElectricAndVeloityFields() {$/;"	f	class:fdtd
updateEx	src/fdtd.cpp	/^void fdtd::updateEx() {$/;"	f	class:fdtd
updateExIn	src/cpml.h	/^    void updateExIn(const unsigned k, data3d<type1> &Ex, const data3d<type1> &Hz, const data3d<type2>&ID1, const type1* CB, const type1 dy) {$/;"	f	class:cpml
updateExOut	src/cpml.h	/^    void updateExOut(data3d<type1> &Ex, const data3d<type1> &Hy, const data3d<type2>&ID1, const type1* CB, const type1 dz) {$/;"	f	class:cpml
updateEy	src/fdtd.cpp	/^void fdtd::updateEy() {$/;"	f	class:fdtd
updateEyIn	src/cpml.h	/^    void updateEyIn(const unsigned k, data3d<type1> &Ey, const data3d<type1> &Hz, const data3d<type2>&ID2, const type1* CB, const type1 dx) {$/;"	f	class:cpml
updateEyOut	src/cpml.h	/^    void updateEyOut(data3d<type1> &Ey, const data3d<type1> &Hx, const data3d<type2>&ID2, const type1* CB, const type1 dz) {$/;"	f	class:cpml
updateEz	src/cpml.h	/^    void updateEz(const unsigned k, data3d<type1> &Ez, const data3d<type1>&Hx, const data3d<type1>&Hy, const data3d<type2>&ID3, const type1* CB, const type1 dx, const type1 dy) {$/;"	f	class:cpml
updateEz	src/fdtd.cpp	/^void fdtd::updateEz() {$/;"	f	class:fdtd
updateHx	src/fdtd.cpp	/^void fdtd::updateHx() {$/;"	f	class:fdtd
updateHxIn	src/cpml.h	/^    void updateHxIn(const unsigned k, data3d<type1> &Hx, const data3d<type1> &Ez, const type1 DB, const type1 dy) {$/;"	f	class:cpml
updateHxOut	src/cpml.h	/^    void updateHxOut(data3d<type1> &Hx, const data3d<type1> &Ey, const type1 DB, const type1 dz) {$/;"	f	class:cpml
updateHy	src/fdtd.cpp	/^void fdtd::updateHy() {$/;"	f	class:fdtd
updateHyIn	src/cpml.h	/^    void updateHyIn(const unsigned k, data3d<type1> &Hy, const data3d<type1> &Ez, const type1 DB, const type1 dx) {$/;"	f	class:cpml
updateHyOut	src/cpml.h	/^    void updateHyOut(data3d<type1> &Hy, const data3d<type1> &Ex, const type1 DB, const type1 dz) {$/;"	f	class:cpml
updateHz	src/cpml.h	/^    void updateHz(const unsigned k, data3d<type1> &Hz, const data3d<type1>&Ex, const data3d<type1>&Ey, const type1 DB, const type1 dx, const type1 dy) {$/;"	f	class:cpml
updateHz	src/fdtd.cpp	/^void fdtd::updateHz() {$/;"	f	class:fdtd
updateMagneitcFields	src/fdtd.cpp	/^void fdtd::updateMagneitcFields() {$/;"	f	class:fdtd
updateSource	src/fdtd.cpp	/^void fdtd::updateSource(unsigned n) {$/;"	f	class:fdtd
vm	src/fdtd.h	/^    MyDataF vm; \/\/collision frequency$/;"	m	class:fdtd
waveType	src/inputChecker.h	/^    int waveType;$/;"	m	class:inputChecker
writeField	src/fdtd.cpp	/^void fdtd::writeField(unsigned iteration) {$/;"	f	class:fdtd
writeField	test/testMain.cpp	/^void writeField(int iteration) {$/;"	f
writeField	test/testcpml.cpp	/^void writeField(int iteration) {$/;"	f
xZoneLen	src/inputChecker.h	/^    float xZoneLen;$/;"	m	class:inputChecker
yZoneLen	src/inputChecker.h	/^    float yZoneLen;$/;"	m	class:inputChecker
yeeCellSize	src/inputChecker.h	/^    int yeeCellSize;$/;"	m	class:inputChecker
yeeCellSizeX	src/inputChecker.h	/^    int yeeCellSizeX;$/;"	m	class:inputChecker
yeeCellSizeY	src/inputChecker.h	/^    int yeeCellSizeY;$/;"	m	class:inputChecker
yeeCellSizeZ	src/inputChecker.h	/^    int yeeCellSizeZ;$/;"	m	class:inputChecker
yeeCube	src/fdtd.cpp	/^void fdtd::yeeCube(unsigned I, unsigned J, unsigned K, unsigned mType) {$/;"	f	class:fdtd
yeeCube	test/testMain.cpp	/^void yeeCube(int I, int J, int K, short mType) {$/;"	f
yeeCube	test/testcpml.cpp	/^void yeeCube(int I, int J, int K, short mType) {$/;"	f
zZoneLen	src/inputChecker.h	/^    float zZoneLen;$/;"	m	class:inputChecker
zoneLen	src/inputChecker.h	/^    float zoneLen;$/;"	m	class:inputChecker
~cpml	src/cpml.h	/^    virtual ~cpml() {$/;"	f	class:cpml
~data1d	src/datastruct.h	/^    ~data1d() {$/;"	f	class:data1d
~data3d	src/datastruct.cpp	/^data3d<DataType>::~data3d() {$/;"	f	class:data3d
~fdtd	src/fdtd.cpp	/^fdtd::~fdtd(void) {$/;"	f	class:fdtd
~inputChecker	src/inputChecker.cpp	/^inputChecker::~inputChecker() {$/;"	f	class:inputChecker
