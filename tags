!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALI	src/common.h	31;"	d
Alpha_Kang	src/InonizationFormula.cpp	/^MyDataF Alpha_Kang(MyDataF E) {$/;"	f
Alpha_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Alpha_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Alpha_Nikonov	src/InonizationFormula.cpp	/^MyDataF Alpha_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Approximations	3DFormulaTransforming.tex	/^\\section{Approximations}$/;"	s
C	src/common.h	/^const MyDataF C = 2.99792458E8; \/\/ speed of light in free space$/;"	v
C	src/cpml.h	/^const double C = 2.99792458E8; \/\/ speed of light in free space$/;"	v
CA	src/fdtd.h	/^    MyDataF *CA;$/;"	m	class:fdtd
CB	src/fdtd.h	/^    MyDataF *CB;$/;"	m	class:fdtd
COMMON_H	src/common.h	2;"	d
CPML_H	src/cpml.h	9;"	d
CPsi_exy_yn	src/cpml.h	/^    data3d<T> CPsi_exy_yn;$/;"	m	class:cpml
CPsi_exy_yp	src/cpml.h	/^    data3d<T> CPsi_exy_yp;$/;"	m	class:cpml
CPsi_exz_zn	src/cpml.h	/^    data3d<T> CPsi_exz_zn;$/;"	m	class:cpml
CPsi_exz_zp	src/cpml.h	/^    data3d<T> CPsi_exz_zp;$/;"	m	class:cpml
CPsi_eyx_xn	src/cpml.h	/^    data3d<T> CPsi_eyx_xn;$/;"	m	class:cpml
CPsi_eyx_xp	src/cpml.h	/^    data3d<T> CPsi_eyx_xp;$/;"	m	class:cpml
CPsi_eyz_zn	src/cpml.h	/^    data3d<T> CPsi_eyz_zn;$/;"	m	class:cpml
CPsi_eyz_zp	src/cpml.h	/^    data3d<T> CPsi_eyz_zp;$/;"	m	class:cpml
CPsi_ezx_xn	src/cpml.h	/^    data3d<T> CPsi_ezx_xn;$/;"	m	class:cpml
CPsi_ezx_xp	src/cpml.h	/^    data3d<T> CPsi_ezx_xp;$/;"	m	class:cpml
CPsi_ezy_yn	src/cpml.h	/^    data3d<T> CPsi_ezy_yn;$/;"	m	class:cpml
CPsi_ezy_yp	src/cpml.h	/^    data3d<T> CPsi_ezy_yp;$/;"	m	class:cpml
CPsi_hxy_yn	src/cpml.h	/^    data3d<T> CPsi_hxy_yn;$/;"	m	class:cpml
CPsi_hxy_yp	src/cpml.h	/^    data3d<T> CPsi_hxy_yp;$/;"	m	class:cpml
CPsi_hxz_zn	src/cpml.h	/^    data3d<T> CPsi_hxz_zn;$/;"	m	class:cpml
CPsi_hxz_zp	src/cpml.h	/^    data3d<T> CPsi_hxz_zp;$/;"	m	class:cpml
CPsi_hyx_xn	src/cpml.h	/^    data3d<T> CPsi_hyx_xn;$/;"	m	class:cpml
CPsi_hyx_xp	src/cpml.h	/^    data3d<T> CPsi_hyx_xp;$/;"	m	class:cpml
CPsi_hyz_zn	src/cpml.h	/^    data3d<T> CPsi_hyz_zn;$/;"	m	class:cpml
CPsi_hyz_zp	src/cpml.h	/^    data3d<T> CPsi_hyz_zp;$/;"	m	class:cpml
CPsi_hzx_xn	src/cpml.h	/^    data3d<T> CPsi_hzx_xn;$/;"	m	class:cpml
CPsi_hzx_xp	src/cpml.h	/^    data3d<T> CPsi_hzx_xp;$/;"	m	class:cpml
CPsi_hzy_yn	src/cpml.h	/^    data3d<T> CPsi_hzy_yn;$/;"	m	class:cpml
CPsi_hzy_yp	src/cpml.h	/^    data3d<T> CPsi_hzy_yp;$/;"	m	class:cpml
CaptData	src/datastruct.h	/^void data3d<DataType>::CaptData(const unsigned num, unsigned leap) {$/;"	f	class:data3d
Cexe	src/fdtd.h	/^    data3d<MyDataF> Cexe, Ceye, Ceze;$/;"	m	class:fdtd
Cexhy	src/fdtd.h	/^    data3d<MyDataF> Cexhy, Ceyhz, Cezhx, Cexhz, Ceyhx, Cezhy;$/;"	m	class:fdtd
Cexhz	src/fdtd.h	/^    data3d<MyDataF> Cexhy, Ceyhz, Cezhx, Cexhz, Ceyhx, Cezhy;$/;"	m	class:fdtd
Cexvx	src/fdtd.h	/^    data3d<MyDataF> Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Ceye	src/fdtd.h	/^    data3d<MyDataF> Cexe, Ceye, Ceze;$/;"	m	class:fdtd
Ceyhx	src/fdtd.h	/^    data3d<MyDataF> Cexhy, Ceyhz, Cezhx, Cexhz, Ceyhx, Cezhy;$/;"	m	class:fdtd
Ceyhz	src/fdtd.h	/^    data3d<MyDataF> Cexhy, Ceyhz, Cezhx, Cexhz, Ceyhx, Cezhy;$/;"	m	class:fdtd
Ceyvy	src/fdtd.h	/^    data3d<MyDataF> Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
Ceze	src/fdtd.h	/^    data3d<MyDataF> Cexe, Ceye, Ceze;$/;"	m	class:fdtd
Cezhx	src/fdtd.h	/^    data3d<MyDataF> Cexhy, Ceyhz, Cezhx, Cexhz, Ceyhx, Cezhy;$/;"	m	class:fdtd
Cezhy	src/fdtd.h	/^    data3d<MyDataF> Cexhy, Ceyhz, Cezhx, Cexhz, Ceyhx, Cezhy;$/;"	m	class:fdtd
Cezvz	src/fdtd.h	/^    data3d<MyDataF> Cezvz, Ceyvy, Cexvx;$/;"	m	class:fdtd
CheckStruct	src/datastruct.h	/^bool data3d<DataType>::CheckStruct() {$/;"	f	class:data3d
Chxey	src/fdtd.h	/^    data3d<MyDataF> Chxey, Chyez, Chzex, Chxez, Chyex, Chzey;$/;"	m	class:fdtd
Chxez	src/fdtd.h	/^    data3d<MyDataF> Chxey, Chyez, Chzex, Chxez, Chyex, Chzey;$/;"	m	class:fdtd
Chxh	src/fdtd.h	/^    data3d<MyDataF> Chxh, Chyh, Chzh;$/;"	m	class:fdtd
Chyex	src/fdtd.h	/^    data3d<MyDataF> Chxey, Chyez, Chzex, Chxez, Chyex, Chzey;$/;"	m	class:fdtd
Chyez	src/fdtd.h	/^    data3d<MyDataF> Chxey, Chyez, Chzex, Chxez, Chyex, Chzey;$/;"	m	class:fdtd
Chyh	src/fdtd.h	/^    data3d<MyDataF> Chxh, Chyh, Chzh;$/;"	m	class:fdtd
Chzex	src/fdtd.h	/^    data3d<MyDataF> Chxey, Chyez, Chzex, Chxez, Chyex, Chzey;$/;"	m	class:fdtd
Chzey	src/fdtd.h	/^    data3d<MyDataF> Chxey, Chyez, Chzex, Chxez, Chyex, Chzey;$/;"	m	class:fdtd
Chzh	src/fdtd.h	/^    data3d<MyDataF> Chxh, Chyh, Chzh;$/;"	m	class:fdtd
ClearSim	src/datastruct.h	/^void data3d<DataType>::ClearSim() {$/;"	f	class:data3d
CloseEngine	src/datastruct.h	/^int data3d<DataType>::CloseEngine() {$/;"	f	class:data3d
Coeff_velocity	src/fdtd.h	/^    MyDataF Coeff_velocity;$/;"	m	class:fdtd
CreateStruct	src/datastruct.h	/^    void CreateStruct(unsigned num) {$/;"	f	class:data1d
CreateStruct	src/datastruct.h	/^    void CreateStruct(unsigned num, T val) {$/;"	f	class:data1d
CreateStruct	src/datastruct.h	/^int data3d<DataType>::CreateStruct(const data3d< DataType > &stru) {$/;"	f	class:data3d
CreateStruct	src/datastruct.h	/^int data3d<DataType>::CreateStruct(const data3d< DataType > &stru, DataType initVal) {$/;"	f	class:data3d
CreateStruct	src/datastruct.h	/^int data3d<DataType>::CreateStruct(unsigned nnx, unsigned nny, unsigned nnz) {$/;"	f	class:data3d
CreateStruct	src/datastruct.h	/^int data3d<DataType>::CreateStruct(unsigned nnx, unsigned nny, unsigned nnz, DataType initVal) {$/;"	f	class:data3d
Cvxex	src/fdtd.h	/^    MyDataF Cvxex, Cvyey, Cvzez;$/;"	m	class:fdtd
Cvxex_guassian	src/fdtd.h	/^    data3d<MyDataF> Cvxex_guassian, Cvyey_guassian, Cvzez_guassian;$/;"	m	class:fdtd
Cvyey	src/fdtd.h	/^    MyDataF Cvxex, Cvyey, Cvzez;$/;"	m	class:fdtd
Cvyey_guassian	src/fdtd.h	/^    data3d<MyDataF> Cvxex_guassian, Cvyey_guassian, Cvzez_guassian;$/;"	m	class:fdtd
Cvzez	src/fdtd.h	/^    MyDataF Cvxex, Cvyey, Cvzez;$/;"	m	class:fdtd
Cvzez_guassian	src/fdtd.h	/^    data3d<MyDataF> Cvxex_guassian, Cvyey_guassian, Cvzez_guassian;$/;"	m	class:fdtd
DA	src/fdtd.h	/^    MyDataF DA;$/;"	m	class:fdtd
DATASTRUCT_H	src/datastruct.h	26;"	d
DB	src/fdtd.h	/^    MyDataF DB;$/;"	m	class:fdtd
DEFAULT_AMPTIDUTE	src/common.h	14;"	d
DEFAULT_DENSITY_MAX	src/common.h	35;"	d
DEFAULT_FLUID_GRID_SIZE	src/common.h	11;"	d
DEFAULT_FREQUENCY	src/common.h	15;"	d
DEFAULT_GRID_SIZE	src/common.h	12;"	d
DEFAULT_NU_FORMAT	src/common.h	32;"	d
DEFAULT_PML_SIZE	src/common.h	10;"	d
DEFAULT_THREAD_COUNT	src/common.h	9;"	d
DEFAULT_TIME_ZONE_LENGTH	src/common.h	16;"	d
DEFAULT_WAVE_TYPE	src/common.h	24;"	d
DEFAULT_ZONE_SIZE	src/common.h	13;"	d
DERIVE_GAUSSIAN_TYPE	src/common.h	21;"	d
Da	src/fdtd.h	/^    MyDataF Da;$/;"	m	class:fdtd
De	src/fdtd.h	/^    MyDataF De;$/;"	m	class:fdtd
Erms	src/fdtd.h	/^    data3d<MyDataF> Erms;$/;"	m	class:fdtd
Eta_Kang	src/InonizationFormula.cpp	/^MyDataF Eta_Kang(MyDataF E) {$/;"	f
Eta_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Eta_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Eta_Nikonov	src/InonizationFormula.cpp	/^MyDataF Eta_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Ex	src/fdtd.h	/^    data3d<MyDataF> Ex;$/;"	m	class:fdtd
Ey	src/fdtd.h	/^    data3d<MyDataF> Ey;$/;"	m	class:fdtd
Ez	src/fdtd.h	/^    data3d<MyDataF> Ez;$/;"	m	class:fdtd
Full iteration equations	3DFormulaTransforming.tex	/^\\section{Full iteration equations}$/;"	s
GAUSSIAN	src/inputChecker.h	/^    const static int GAUSSIAN = GAUSSIAN_WAVE_TYPE;$/;"	m	class:inputChecker
GAUSSIAN_WAVE_TYPE	src/common.h	19;"	d
Hx	src/fdtd.h	/^    data3d<MyDataF> Hx;$/;"	m	class:fdtd
Hy	src/fdtd.h	/^    data3d<MyDataF> Hy;$/;"	m	class:fdtd
Hz	src/fdtd.h	/^    data3d<MyDataF> Hz;$/;"	m	class:fdtd
ID1	src/fdtd.h	/^    data3d<unsigned> ID1; \/\/medium definition array for Ex$/;"	m	class:fdtd
ID2	src/fdtd.h	/^    data3d<unsigned> ID2; \/\/medium definition array for Ey$/;"	m	class:fdtd
ID3	src/fdtd.h	/^    data3d<unsigned> ID3; \/\/medium definition array for Ez$/;"	m	class:fdtd
INONIZATION_FORMULA_H	src/InonizationFormula.h	3;"	d
INPUTCHECKER_H	src/inputChecker.h	9;"	d
Imax	src/fdtd.h	/^    unsigned Imax;$/;"	m	class:fdtd
InitMatlabEngine	src/datastruct.h	/^int data3d<DataType>::InitMatlabEngine() {$/;"	f	class:data3d
InitPlot	src/datastruct.h	/^void data3d<DataType>::InitPlot() {$/;"	f	class:data3d
InitStructData	src/datastruct.h	/^void data3d<DataType>::InitStructData(DataType initVal) {$/;"	f	class:data3d
IntegerEeff	src/fdtd.cpp	/^void fdtd::IntegerEeff() {$/;"	f	class:fdtd
InterpErms	src/fdtd.cpp	/^void fdtd::InterpErms() {$/;"	f	class:fdtd
Jmax	src/fdtd.h	/^    unsigned Jmax;$/;"	m	class:fdtd
KANG	src/common.h	30;"	d
Kmax	src/fdtd.h	/^    unsigned Kmax;$/;"	m	class:fdtd
MAX_ARRAY_SIZE	src/datastruct.h	44;"	d
MAX_TYPE_VALUE	src/common.h	25;"	d
MORROW_AND_LOWKE	src/common.h	28;"	d
M_PI_TWO	src/common.h	/^const MyDataF M_PI_TWO = M_PI * 2;$/;"	v
M_PI_TWO	src/cpml.h	/^const double M_PI_TWO = M_PI * 2;$/;"	v
Mu0DivEps0	src/cpml.h	/^const double Mu0DivEps0 = mu_0 \/ eps_0;$/;"	v
MyArray	src/datastruct.h	/^    mxArray *MyArray;$/;"	m	class:data3d
MyDataF	src/common.h	/^typedef double MyDataF;$/;"	t
NIKONOV	src/common.h	29;"	d
Ne	src/fdtd.h	/^    data3d<MyDataF> Ne, Ne_pre;$/;"	m	class:fdtd
Ne0	src/fdtd.h	/^    MyDataF Ne0;$/;"	m	class:fdtd
Ne_pre	src/fdtd.h	/^    data3d<MyDataF> Ne, Ne_pre;$/;"	m	class:fdtd
Niu_Kang	src/InonizationFormula.cpp	/^void Niu_Kang(MyDataF *pNiu_i, MyDataF *pNiu_a, MyDataF E) {$/;"	f
Niu_MorrowAndLowke	src/InonizationFormula.cpp	/^void Niu_MorrowAndLowke(MyDataF *pNiu_i, MyDataF *pNiu_a, MyDataF E, MyDataF N) {$/;"	f
Niu_Nikonov	src/InonizationFormula.cpp	/^void Niu_Nikonov(MyDataF *pNiu_i, MyDataF *pNiu_a, MyDataF E, MyDataF P) {$/;"	f
Niu_a_Kang	src/InonizationFormula.cpp	/^MyDataF Niu_a_Kang(MyDataF E) {$/;"	f
Niu_a_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Niu_a_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Niu_a_Nikonov	src/InonizationFormula.cpp	/^MyDataF Niu_a_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Niu_i_Kang	src/InonizationFormula.cpp	/^MyDataF Niu_i_Kang(MyDataF E) {$/;"	f
Niu_i_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF Niu_i_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
Niu_i_Nikonov	src/InonizationFormula.cpp	/^MyDataF Niu_i_Nikonov(MyDataF E, MyDataF P) {$/;"	f
Nu_c	src/fdtd.h	/^    data3d<MyDataF> Nu_c;$/;"	m	class:fdtd
Number	src/datastruct.h	/^    int Number;$/;"	m	class:data3d
OBJS	Makefile	/^OBJS=cpml.o hpw3d.o fdtd.o InonizationFormula.o inputChecker.o source.o$/;"	m
Original functions	3DFormulaTransforming.tex	/^\\section{Original functions}$/;"	s
PlotArrays	src/datastruct.h	/^void data3d<DataType>::PlotArrays() {$/;"	f	class:data3d
PrintData	src/datastruct.h	/^void data3d<DataType>::PrintData() {$/;"	f	class:data3d
Psi_exy_yn	src/cpml.h	/^    data3d<T> Psi_exy_yn;$/;"	m	class:cpml
Psi_exy_yp	src/cpml.h	/^    data3d<T> Psi_exy_yp;$/;"	m	class:cpml
Psi_exz_zn	src/cpml.h	/^    data3d<T> Psi_exz_zn;$/;"	m	class:cpml
Psi_exz_zp	src/cpml.h	/^    data3d<T> Psi_exz_zp;$/;"	m	class:cpml
Psi_eyx_xn	src/cpml.h	/^    data3d<T> Psi_eyx_xn;$/;"	m	class:cpml
Psi_eyx_xp	src/cpml.h	/^    data3d<T> Psi_eyx_xp;$/;"	m	class:cpml
Psi_eyz_zn	src/cpml.h	/^    data3d<T> Psi_eyz_zn;$/;"	m	class:cpml
Psi_eyz_zp	src/cpml.h	/^    data3d<T> Psi_eyz_zp;$/;"	m	class:cpml
Psi_ezx_xn	src/cpml.h	/^    data3d<T> Psi_ezx_xn;$/;"	m	class:cpml
Psi_ezx_xp	src/cpml.h	/^    data3d<T> Psi_ezx_xp;$/;"	m	class:cpml
Psi_ezy_yn	src/cpml.h	/^    data3d<T> Psi_ezy_yn;$/;"	m	class:cpml
Psi_ezy_yp	src/cpml.h	/^    data3d<T> Psi_ezy_yp;$/;"	m	class:cpml
Psi_hxy_yn	src/cpml.h	/^    data3d<T> Psi_hxy_yn;$/;"	m	class:cpml
Psi_hxy_yp	src/cpml.h	/^    data3d<T> Psi_hxy_yp;$/;"	m	class:cpml
Psi_hxz_zn	src/cpml.h	/^    data3d<T> Psi_hxz_zn;$/;"	m	class:cpml
Psi_hxz_zp	src/cpml.h	/^    data3d<T> Psi_hxz_zp;$/;"	m	class:cpml
Psi_hyx_xn	src/cpml.h	/^    data3d<T> Psi_hyx_xn;$/;"	m	class:cpml
Psi_hyx_xp	src/cpml.h	/^    data3d<T> Psi_hyx_xp;$/;"	m	class:cpml
Psi_hyz_zn	src/cpml.h	/^    data3d<T> Psi_hyz_zn;$/;"	m	class:cpml
Psi_hyz_zp	src/cpml.h	/^    data3d<T> Psi_hyz_zp;$/;"	m	class:cpml
Psi_hzx_xn	src/cpml.h	/^    data3d<T> Psi_hzx_xn;$/;"	m	class:cpml
Psi_hzx_xp	src/cpml.h	/^    data3d<T> Psi_hzx_xp;$/;"	m	class:cpml
Psi_hzy_yn	src/cpml.h	/^    data3d<T> Psi_hzy_yn;$/;"	m	class:cpml
Psi_hzy_yp	src/cpml.h	/^    data3d<T> Psi_hzy_yp;$/;"	m	class:cpml
ResetStructData	src/datastruct.h	/^int data3d<DataType>::ResetStructData(DataType Val) {$/;"	f	class:data3d
SINE	src/inputChecker.h	/^    const static int SINE = SINE_WAVE_TYPE;$/;"	m	class:inputChecker
SINE_PULSE_TYPE	src/common.h	23;"	d
SINE_WAVE_TYPE	src/common.h	20;"	d
SOURCE_DERIVE_GAUSSIAN	src/fdtd.h	/^    static const int SOURCE_DERIVE_GAUSSIAN = DERIVE_GAUSSIAN_TYPE;$/;"	m	class:fdtd
SOURCE_GAUSSIAN	src/fdtd.h	/^    static const int SOURCE_GAUSSIAN = GAUSSIAN_WAVE_TYPE;$/;"	m	class:fdtd
SOURCE_H	src/source.h	9;"	d
SOURCE_SINE	src/fdtd.h	/^    static const int SOURCE_SINE = SINE_WAVE_TYPE;$/;"	m	class:fdtd
SOURCE_ZERO	src/fdtd.h	/^    static const int SOURCE_ZERO = ZERO_TYPE;$/;"	m	class:fdtd
SRC	Makefile	/^SRC=src$/;"	m
SaveData	src/datastruct.h	/^void data3d<DataType>::SaveData(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveData	src/datastruct.h	/^void data3d<DataType>::SaveData(unsigned k, unsigned leap, unsigned step, int type) {$/;"	f	class:data3d
SaveData	src/datastruct.h	/^void data3d<DataType>::SaveData(unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveXPlain	src/datastruct.h	/^void data3d<DataType>::SaveXPlain(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveYPlain	src/datastruct.h	/^void data3d<DataType>::SaveYPlain(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SaveZPlain	src/datastruct.h	/^void data3d<DataType>::SaveZPlain(unsigned k, unsigned leap, unsigned step) {$/;"	f	class:data3d
SetPlasmaVar	src/fdtd.cpp	/^void fdtd::SetPlasmaVar(MyDataF _rei, MyDataF _vm, MyDataF _p, int _ftype) {$/;"	f	class:fdtd
SetSineSource	src/fdtd.cpp	/^void fdtd::SetSineSource(MyDataF omega_) {$/;"	f	class:fdtd
SinePulse	src/source.cpp	/^MyDataF Source::SinePulse(MyDataF t, MyDataF omega, MyDataF t_max, MyDataF t_min) {$/;"	f	class:Source
SineWave	src/source.cpp	/^MyDataF Source::SineWave(MyDataF t, MyDataF omega) {$/;"	f	class:Source
Source	src/source.cpp	/^Source::Source() {$/;"	f	class:Source
Source	src/source.cpp	/^Source::Source(const Source& orig) {$/;"	f	class:Source
Source	src/source.h	/^class Source {$/;"	c
StartUp	src/fdtd.cpp	/^void fdtd::StartUp() {$/;"	f	class:fdtd
T	src/hpw3d.cpp	/^MyDataF T; \/\/ ns$/;"	v
UpdateDensity	src/fdtd.cpp	/^void fdtd::UpdateDensity(void) {$/;"	f	class:fdtd
UpdateErms	src/fdtd.cpp	/^void fdtd::UpdateErms(void) {$/;"	f	class:fdtd
UpdateVeloity	src/fdtd.cpp	/^void fdtd::UpdateVeloity(void) {$/;"	f	class:fdtd
VPATH	Makefile	/^VPATH = $(SRC):$(TEST_SRC_DIR)$/;"	m
Vx	src/fdtd.h	/^    data3d<MyDataF> Vx;$/;"	m	class:fdtd
Vy	src/fdtd.h	/^    data3d<MyDataF> Vy;$/;"	m	class:fdtd
Vz	src/fdtd.h	/^    data3d<MyDataF> Vz;$/;"	m	class:fdtd
WallCircleBound	src/fdtd.cpp	/^void fdtd::WallCircleBound(data3d<MyDataF> &stru) {$/;"	f	class:fdtd
We_Kang	src/InonizationFormula.cpp	/^MyDataF We_Kang(MyDataF E) {$/;"	f
We_MorrowAndLowke	src/InonizationFormula.cpp	/^MyDataF We_MorrowAndLowke(MyDataF E, MyDataF N) {$/;"	f
We_Nikonov	src/InonizationFormula.cpp	/^MyDataF We_Nikonov(MyDataF E, MyDataF P) {$/;"	f
ZERO_TYPE	src/common.h	22;"	d
_CRT_SECURE_NO_WARNINGS	src/datastruct.cpp	27;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/datastruct.h	414;"	d
_USE_MATH_DEFINES	src/common.h	3;"	d
a	src/fdtd.h	/^    MyDataF a;$/;"	m	class:fdtd
alpha	src/fdtd.h	/^    MyDataF alpha;$/;"	m	class:fdtd
amp	src/fdtd.h	/^    MyDataF amp; \/\/ Amplitude$/;"	m	class:fdtd
amptidute	src/inputChecker.h	/^    double amptidute;$/;"	m	class:inputChecker
beta	src/fdtd.h	/^    data3d<MyDataF> beta;$/;"	m	class:fdtd
buildDipole	src/fdtd.cpp	/^void fdtd::buildDipole() {$/;"	f	class:fdtd
buildObject	src/fdtd.cpp	/^void fdtd::buildObject() {$/;"	f	class:fdtd
buildSphere	src/fdtd.cpp	/^void fdtd::buildSphere() {$/;"	f	class:fdtd
check	src/inputChecker.cpp	/^void inputChecker::check() {$/;"	f	class:inputChecker
cnt	src/datastruct.h	/^    static unsigned int cnt;$/;"	m	class:data3d
cnt	src/datastruct.h	/^template<class DataType> unsigned int data3d<DataType>::cnt = 0;$/;"	m	class:data3d
compute	src/fdtd.cpp	/^void fdtd::compute() {$/;"	f	class:fdtd
cpml	src/cpml.h	/^class cpml {$/;"	c
cpml	src/cpml.h	/^cpml<T>::cpml()$/;"	f	class:cpml
cpml	src/cpml.h	/^cpml<T>::cpml(const cpml& orig)$/;"	f	class:cpml
cpml	src/cpml.h	/^template<class T> cpml<T>::cpml(unsigned short cpmlWidth, unsigned imax, unsigned jmax, unsigned kmax) {$/;"	f	class:cpml
cpml	src/cpml.h	/^template<class T> cpml<T>::cpml(unsigned short width_xn, unsigned short width_xp,$/;"	f	class:cpml
cpml_a_ex_xn	src/cpml.h	/^    data1d<T> cpml_a_ex_xn;$/;"	m	class:cpml
cpml_a_ex_xp	src/cpml.h	/^    data1d<T> cpml_a_ex_xp;$/;"	m	class:cpml
cpml_a_ey_yn	src/cpml.h	/^    data1d<T> cpml_a_ey_yn;$/;"	m	class:cpml
cpml_a_ey_yp	src/cpml.h	/^    data1d<T> cpml_a_ey_yp;$/;"	m	class:cpml
cpml_a_ez_zn	src/cpml.h	/^    data1d<T> cpml_a_ez_zn;$/;"	m	class:cpml
cpml_a_ez_zp	src/cpml.h	/^    data1d<T> cpml_a_ez_zp;$/;"	m	class:cpml
cpml_a_mx_xn	src/cpml.h	/^    data1d<T> cpml_a_mx_xn;$/;"	m	class:cpml
cpml_a_mx_xp	src/cpml.h	/^    data1d<T> cpml_a_mx_xp;$/;"	m	class:cpml
cpml_a_my_yn	src/cpml.h	/^    data1d<T> cpml_a_my_yn;$/;"	m	class:cpml
cpml_a_my_yp	src/cpml.h	/^    data1d<T> cpml_a_my_yp;$/;"	m	class:cpml
cpml_a_mz_zn	src/cpml.h	/^    data1d<T> cpml_a_mz_zn;$/;"	m	class:cpml
cpml_a_mz_zp	src/cpml.h	/^    data1d<T> cpml_a_mz_zp;$/;"	m	class:cpml
cpml_b_ex_xn	src/cpml.h	/^    data1d<T> cpml_b_ex_xn;$/;"	m	class:cpml
cpml_b_ex_xp	src/cpml.h	/^    data1d<T> cpml_b_ex_xp;$/;"	m	class:cpml
cpml_b_ey_yn	src/cpml.h	/^    data1d<T> cpml_b_ey_yn;$/;"	m	class:cpml
cpml_b_ey_yp	src/cpml.h	/^    data1d<T> cpml_b_ey_yp;$/;"	m	class:cpml
cpml_b_ez_zn	src/cpml.h	/^    data1d<T> cpml_b_ez_zn;$/;"	m	class:cpml
cpml_b_ez_zp	src/cpml.h	/^    data1d<T> cpml_b_ez_zp;$/;"	m	class:cpml
cpml_b_mx_xn	src/cpml.h	/^    data1d<T> cpml_b_mx_xn;$/;"	m	class:cpml
cpml_b_mx_xp	src/cpml.h	/^    data1d<T> cpml_b_mx_xp;$/;"	m	class:cpml
cpml_b_my_yn	src/cpml.h	/^    data1d<T> cpml_b_my_yn;$/;"	m	class:cpml
cpml_b_my_yp	src/cpml.h	/^    data1d<T> cpml_b_my_yp;$/;"	m	class:cpml
cpml_b_mz_zn	src/cpml.h	/^    data1d<T> cpml_b_mz_zn;$/;"	m	class:cpml
cpml_b_mz_zp	src/cpml.h	/^    data1d<T> cpml_b_mz_zp;$/;"	m	class:cpml
createArray	src/datastruct.h	/^    void createArray(unsigned num) {$/;"	f	class:data1d
createArray	src/datastruct.h	/^    void createArray(unsigned num, T val) {$/;"	f	class:data1d
createCPMLArrays	src/cpml.h	/^void cpml<T>::createCPMLArrays(unsigned nx, unsigned ny, unsigned nz) {$/;"	f	class:cpml
createCoeff	src/fdtd.cpp	/^void fdtd::createCoeff() {$/;"	f	class:fdtd
data1d	src/datastruct.h	/^    data1d() : p(NULL), n(0) {$/;"	f	class:data1d
data1d	src/datastruct.h	/^    data1d(const data1d& orig) {$/;"	f	class:data1d
data1d	src/datastruct.h	/^    data1d(unsigned num, T val = 0) : p(NULL), n(num) {$/;"	f	class:data1d
data1d	src/datastruct.h	/^class data1d {$/;"	c
data3d	src/datastruct.h	/^    data3d() : nx(0), ny(0), nz(0), p(NULL) {$/;"	f	class:data3d
data3d	src/datastruct.h	/^    data3d(unsigned int cx, unsigned int cy, unsigned cz)$/;"	f	class:data3d
data3d	src/datastruct.h	/^class data3d {$/;"	c
data3d	src/datastruct.h	/^template<class DataType> data3d<DataType>::data3d(const data3d< DataType >& obj) : p(NULL) {$/;"	f	class:data3d
doMatlabSimulation	src/fdtd.cpp	/^void fdtd::doMatlabSimulation() {$/;"	f	class:fdtd
dsf	src/fdtd.h	/^    MyDataF dsf;$/;"	m	class:fdtd
dt	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dtDivEps0DivDxyz	src/fdtd.h	/^    MyDataF dtDivEps0DivDxyz;$/;"	m	class:fdtd
dtf	src/fdtd.h	/^    MyDataF dtf;$/;"	m	class:fdtd
dx	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dx	src/hpw3d.cpp	/^MyDataF dx, dy, dz;$/;"	v
dy	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dy	src/hpw3d.cpp	/^MyDataF dx, dy, dz;$/;"	v
dz	src/fdtd.h	/^    MyDataF dt, dx, dy, dz;$/;"	m	class:fdtd
dz	src/hpw3d.cpp	/^MyDataF dx, dy, dz;$/;"	v
e	src/common.h	/^const MyDataF e = 1.602e-19; \/\/ electricity charge$/;"	v
e	src/cpml.h	/^const double e = 1.602e-19; \/\/ electricity charge$/;"	v
ep	src/datastruct.h	/^    static Engine *ep;$/;"	m	class:data3d
epsR	src/hpw3d.cpp	/^MyDataF epsR;$/;"	v
eps_0	src/common.h	/^const MyDataF eps_0 = 1.0 \/ (C * C * mu_0);$/;"	v
eps_0	src/cpml.h	/^const double eps_0 = 1.0 \/ (C * C * mu_0);$/;"	v
epsilon	src/fdtd.h	/^    MyDataF *epsilon;$/;"	m	class:fdtd
fdtd	src/fdtd.cpp	/^fdtd::fdtd(unsigned _totalTimeSteps, unsigned _imax, unsigned _jmax, unsigned _kmax,$/;"	f	class:fdtd
fdtd	src/fdtd.h	/^class fdtd {$/;"	c
finishMatlabSimulation	src/fdtd.cpp	/^void fdtd::finishMatlabSimulation() {$/;"	f	class:fdtd
fluidGridSize	src/inputChecker.h	/^    int fluidGridSize;$/;"	m	class:inputChecker
frequency	src/inputChecker.h	/^    double frequency;$/;"	m	class:inputChecker
fun	matlab scripts/fun.m	/^function y=fun(t,r,amp,t0,tw,mu,C)$/;"	f
gamma	src/fdtd.h	/^    MyDataF gamma;$/;"	m	class:fdtd
getName	src/datastruct.h	/^    string getName() {$/;"	f	class:data3d
halfNeGrid	src/fdtd.h	/^    unsigned halfNeGrid;$/;"	m	class:fdtd
half_dt	src/fdtd.h	/^    MyDataF half_dt;$/;"	m	class:fdtd
half_e	src/fdtd.h	/^    MyDataF half_e;$/;"	m	class:fdtd
help	src/inputChecker.cpp	/^void inputChecker::help(char *prog) {$/;"	f	class:inputChecker
iend	src/fdtd.h	/^    unsigned istart, iend, jstart;$/;"	m	class:fdtd
initArray	src/datastruct.h	/^    void initArray(T initval = 0) {$/;"	f	class:data1d
initCoeff	src/fdtd.cpp	/^void fdtd::initCoeff() {$/;"	f	class:fdtd
initCoefficientArrays	src/cpml.h	/^void cpml<T>::initCoefficientArrays(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dx, T dy, T dz,$/;"	f	class:cpml
initCoefficientArraysXN	src/cpml.h	/^void cpml<T>::initCoefficientArraysXN(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dx,$/;"	f	class:cpml
initCoefficientArraysXP	src/cpml.h	/^void cpml<T>::initCoefficientArraysXP(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dx,$/;"	f	class:cpml
initCoefficientArraysYN	src/cpml.h	/^void cpml<T>::initCoefficientArraysYN(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dy,$/;"	f	class:cpml
initCoefficientArraysYP	src/cpml.h	/^void cpml<T>::initCoefficientArraysYP(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dy,$/;"	f	class:cpml
initCoefficientArraysZN	src/cpml.h	/^void cpml<T>::initCoefficientArraysZN(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dz,$/;"	f	class:cpml
initCoefficientArraysZP	src/cpml.h	/^void cpml<T>::initCoefficientArraysZP(short pmlOrder, T sigmaMax, T kappaMax, T alphaMax, T epsR, T dt, T dz,$/;"	f	class:cpml
initCoeficients	src/fdtd.cpp	/^void fdtd::initCoeficients() {$/;"	f	class:fdtd
initDensity	src/fdtd.cpp	/^void fdtd::initDensity() {$/;"	f	class:fdtd
initMatlabSimulation	src/fdtd.cpp	/^int fdtd::initMatlabSimulation() {$/;"	f	class:fdtd
initialize	src/fdtd.cpp	/^void fdtd::initialize() {$/;"	f	class:fdtd
inputChecker	src/inputChecker.cpp	/^inputChecker::inputChecker() :$/;"	f	class:inputChecker
inputChecker	src/inputChecker.cpp	/^inputChecker::inputChecker(const inputChecker& orig) {$/;"	f	class:inputChecker
inputChecker	src/inputChecker.h	/^class inputChecker {$/;"	c
intSourceSinePulse	src/fdtd.cpp	/^void fdtd::intSourceSinePulse(MyDataF t_0, MyDataF omega_, MyDataF tUp, MyDataF tDown, MyDataF amptidute) {$/;"	f	class:fdtd
isMatlabEngineStarted	src/datastruct.h	/^    static bool isMatlabEngineStarted;$/;"	m	class:data3d
isMatlabEngineStarted	src/datastruct.h	/^template<class DataType> bool data3d<DataType>::isMatlabEngineStarted = false;$/;"	m	class:data3d
is_cpml_xn	src/cpml.h	/^    bool is_cpml_xn;$/;"	m	class:cpml
is_cpml_xp	src/cpml.h	/^    bool is_cpml_xp;$/;"	m	class:cpml
is_cpml_yn	src/cpml.h	/^    bool is_cpml_yn;$/;"	m	class:cpml
is_cpml_yp	src/cpml.h	/^    bool is_cpml_yp;$/;"	m	class:cpml
is_cpml_zn	src/cpml.h	/^    bool is_cpml_zn;$/;"	m	class:cpml
is_cpml_zp	src/cpml.h	/^    bool is_cpml_zp;$/;"	m	class:cpml
isp	src/fdtd.h	/^    unsigned isp, jsp, ksp;$/;"	m	class:fdtd
istart	src/fdtd.h	/^    unsigned istart, iend, jstart;$/;"	m	class:fdtd
jend	src/fdtd.h	/^    unsigned jend, kstart, kend;$/;"	m	class:fdtd
jsp	src/fdtd.h	/^    unsigned isp, jsp, ksp;$/;"	m	class:fdtd
jstart	src/fdtd.h	/^    unsigned istart, iend, jstart;$/;"	m	class:fdtd
kend	src/fdtd.h	/^    unsigned jend, kstart, kend;$/;"	m	class:fdtd
ksource	src/fdtd.h	/^    unsigned ksource;$/;"	m	class:fdtd
ksp	src/fdtd.h	/^    unsigned isp, jsp, ksp;$/;"	m	class:fdtd
kstart	src/fdtd.h	/^    unsigned jend, kstart, kend;$/;"	m	class:fdtd
m	src/fdtd.h	/^    unsigned m;$/;"	m	class:fdtd
ma	src/fdtd.h	/^    unsigned ma;$/;"	m	class:fdtd
main	src/hpw3d.cpp	/^int main(int argc, char*argv[]) {$/;"	f
makeomovie	matlab scripts/makeomovie.m	/^function makeomovie(movname,varhead,file,figname,islog,step)$/;"	f
me	src/common.h	/^const MyDataF me = 9.110e-31; \/\/ electricity mass$/;"	v
me	src/cpml.h	/^const double me = 9.110e-31; \/\/ electricity mass$/;"	v
mu	src/fdtd.h	/^    MyDataF *mu;$/;"	m	class:fdtd
mu_0	src/common.h	/^const MyDataF mu_0 = 4.0 * M_PI * 1.0E-7;$/;"	v
mu_0	src/cpml.h	/^const double mu_0 = 4.0 * M_PI * 1.0E-7;$/;"	v
mu_e	src/fdtd.h	/^    MyDataF mu_e;$/;"	m	class:fdtd
mu_i	src/fdtd.h	/^    MyDataF mu_i;$/;"	m	class:fdtd
n	src/datastruct.h	/^    unsigned n;$/;"	m	class:data1d
n_cpml_xn	src/cpml.h	/^    unsigned short n_cpml_xn;$/;"	m	class:cpml
n_cpml_xp	src/cpml.h	/^    unsigned short n_cpml_xp;$/;"	m	class:cpml
n_cpml_yn	src/cpml.h	/^    unsigned short n_cpml_yn;$/;"	m	class:cpml
n_cpml_yp	src/cpml.h	/^    unsigned short n_cpml_yp;$/;"	m	class:cpml
n_cpml_zn	src/cpml.h	/^    unsigned short n_cpml_zn;$/;"	m	class:cpml
n_cpml_zp	src/cpml.h	/^    unsigned short n_cpml_zp;$/;"	m	class:cpml
name	src/datastruct.h	/^    std::string name; \/\/ name for this to save file$/;"	m	class:data3d
nanOperator	src/datastruct.h	/^void data3d<DataType>::nanOperator(unsigned i, unsigned j, unsigned k) {$/;"	f	class:data3d
neGrid	src/fdtd.h	/^    unsigned neGrid;$/;"	m	class:fdtd
neSkipStep	src/fdtd.h	/^    int neSkipStep;$/;"	m	class:fdtd
niutype	src/fdtd.h	/^    int niutype;$/;"	m	class:fdtd
num	src/datastruct.h	/^    mxArray *num;$/;"	m	class:data3d
numMaterials	src/fdtd.h	/^    unsigned numMaterials;$/;"	m	class:fdtd
nx	src/datastruct.h	/^    unsigned int nx;$/;"	m	class:data3d
ny	src/datastruct.h	/^    unsigned int ny;$/;"	m	class:data3d
nz	src/datastruct.h	/^    unsigned int nz;$/;"	m	class:data3d
omega	src/fdtd.h	/^    MyDataF omega; \/\/wave angle frequency$/;"	m	class:fdtd
omega	src/hpw3d.cpp	/^MyDataF omega;$/;"	v
omega	src/inputChecker.h	/^    double omega;$/;"	m	class:inputChecker
operator =	src/datastruct.h	/^void data3d<DataType>::operator =(data3d< DataType > const &other) {$/;"	f	class:data3d
p	src/datastruct.h	/^    DataType*** p;$/;"	m	class:data3d
p	src/datastruct.h	/^    T* p;$/;"	m	class:data1d
p	src/fdtd.h	/^    MyDataF p; \/\/ air pressure$/;"	m	class:fdtd
pMyDataF	src/common.h	/^typedef MyDataF* pMyDataF;$/;"	t
parseInput	src/inputChecker.cpp	/^void inputChecker::parseInput(int argc, char *argv[]) {$/;"	f	class:inputChecker
pml	src/fdtd.h	/^    cpml<MyDataF> pml;$/;"	m	class:fdtd
pmlSize	src/inputChecker.h	/^    int pmlSize;$/;"	m	class:inputChecker
pmlWidth	src/fdtd.h	/^    unsigned pmlWidth;$/;"	m	class:fdtd
ppMyDataF	src/common.h	/^typedef pMyDataF* ppMyDataF;$/;"	t
print	src/inputChecker.cpp	/^void inputChecker::print() {$/;"	f	class:inputChecker
printf	src/datastruct.h	33;"	d
projects	Makefile	/^projects=$(TEST) hpw3d#3DFormulaTransforming.pdf$/;"	m
putvars	src/fdtd.cpp	/^void fdtd::putvars() {$/;"	f	class:fdtd
rei	src/fdtd.h	/^    MyDataF rei;$/;"	m	class:fdtd
resetArray	src/datastruct.h	/^    void resetArray() {$/;"	f	class:data1d
save	src/datastruct.h	/^    void save(const string name) {$/;"	f	class:data1d
save	src/datastruct.h	/^void data3d<DataType>::save(unsigned k, unsigned leap, unsigned step, int type) {$/;"	f	class:data3d
save_modulus	src/fdtd.h	/^    unsigned save_modulus;$/;"	m	class:fdtd
setCPMLRegion	src/cpml.h	/^void cpml<T>::setCPMLRegion(short pmlWidth) {$/;"	f	class:cpml
setCPMLRegion	src/cpml.h	/^void cpml<T>::setCPMLRegion(short width_xn, short width_xp, short width_yn, short width_yp, short width_zn, short width_zp) {$/;"	f	class:cpml
setName	src/datastruct.h	/^    void setName(const std::string &sn) {$/;"	f	class:data3d
setSourceType	src/fdtd.cpp	/^void fdtd::setSourceType(int sourceType) {$/;"	f	class:fdtd
setUp	src/fdtd.cpp	/^void fdtd::setUp() {$/;"	f	class:fdtd
sigma	src/fdtd.h	/^    MyDataF *sigma;$/;"	m	class:fdtd
sign	src/InonizationFormula.cpp	/^int sign(MyDataF val) {$/;"	f
source	src/fdtd.h	/^    MyDataF source; \/\/Differentiated Gaussian source    $/;"	m	class:fdtd
srcType	src/fdtd.h	/^    int srcType;$/;"	m	class:fdtd
t0	src/fdtd.h	/^    MyDataF t0; \/\/delay$/;"	m	class:fdtd
t0	src/inputChecker.h	/^    double t0;$/;"	m	class:inputChecker
tDown	src/inputChecker.h	/^    double tDown;$/;"	m	class:inputChecker
tUp	src/inputChecker.h	/^    double tUp;$/;"	m	class:inputChecker
tZoneLen	src/inputChecker.h	/^    double tZoneLen;$/;"	m	class:inputChecker
t_down	src/fdtd.h	/^    MyDataF t_down; \/\/ down bound of Pulse for Sine Pulse$/;"	m	class:fdtd
t_up	src/fdtd.h	/^    MyDataF t_up; \/\/ up bound of Pulse for Sine Pulse$/;"	m	class:fdtd
tail	src/datastruct.h	/^    static std::string tail;$/;"	m	class:data3d
tail	src/datastruct.h	/^template<class DataType> string data3d<DataType>::tail = ".dat";$/;"	m	class:data3d
threadCount	src/inputChecker.h	/^    int threadCount;$/;"	m	class:inputChecker
thread_count	src/hpw3d.cpp	/^int thread_count = 1;$/;"	v
totalTimeSteps	src/fdtd.h	/^    unsigned totalTimeSteps; \/\/ total number of time steps$/;"	m	class:fdtd
tw	src/fdtd.h	/^    MyDataF tw; \/\/pulse width$/;"	m	class:fdtd
tw	src/hpw3d.cpp	/^MyDataF tw;$/;"	v
updateBeta	src/fdtd.cpp	/^void fdtd::updateBeta() {$/;"	f	class:fdtd
updateCPML_E_Fields	src/cpml.h	/^void cpml<T>::updateCPML_E_Fields(data3d<T>& Ex, data3d<T>& Ey, data3d<T>& Ez,$/;"	f	class:cpml
updateCPML_M_Fields	src/cpml.h	/^void cpml<T>::updateCPML_M_Fields(data3d<T>& Hx, data3d<T>& Hy, data3d<T>& Hz,$/;"	f	class:cpml
updateCoeff	src/fdtd.cpp	/^void fdtd::updateCoeff() {$/;"	f	class:fdtd
updateCollisionFrequency	src/fdtd.cpp	/^void fdtd::updateCollisionFrequency() {$/;"	f	class:fdtd
updateEFieldCPML_x	src/cpml.h	/^void cpml<T>::updateEFieldCPML_x(data3d<T>& Ey, data3d<T>& Ez) {$/;"	f	class:cpml
updateEFieldCPML_y	src/cpml.h	/^void cpml<T>::updateEFieldCPML_y(data3d<T>& Ex, data3d<T>& Ez) {$/;"	f	class:cpml
updateEFieldCPML_z	src/cpml.h	/^void cpml<T>::updateEFieldCPML_z(data3d<T>& Ex, data3d<T>& Ey) {$/;"	f	class:cpml
updateElectricAndVeloityFields	src/fdtd.cpp	/^void fdtd::updateElectricAndVeloityFields() {$/;"	f	class:fdtd
updateEx	src/fdtd.cpp	/^void fdtd::updateEx() {$/;"	f	class:fdtd
updateEy	src/fdtd.cpp	/^void fdtd::updateEy() {$/;"	f	class:fdtd
updateEz	src/fdtd.cpp	/^void fdtd::updateEz() {$/;"	f	class:fdtd
updateHx	src/fdtd.cpp	/^void fdtd::updateHx() {$/;"	f	class:fdtd
updateHy	src/fdtd.cpp	/^void fdtd::updateHy() {$/;"	f	class:fdtd
updateHz	src/fdtd.cpp	/^void fdtd::updateHz() {$/;"	f	class:fdtd
updateMFieldCPML_x	src/cpml.h	/^void cpml<T>::updateMFieldCPML_x(data3d<T>& Hy, data3d<T>& Hz) {$/;"	f	class:cpml
updateMFieldCPML_y	src/cpml.h	/^void cpml<T>::updateMFieldCPML_y(data3d<T>& Hx, data3d<T>& Hz) {$/;"	f	class:cpml
updateMFieldCPML_z	src/cpml.h	/^void cpml<T>::updateMFieldCPML_z(data3d<T>& Hx, data3d<T>& Hy) {$/;"	f	class:cpml
updateMagneitcFields	src/fdtd.cpp	/^void fdtd::updateMagneitcFields() {$/;"	f	class:fdtd
updatePsiForEFields	src/cpml.h	/^void cpml<T>::updatePsiForEFields(const data3d<T>& Hx, const data3d<T>& Hy, const data3d<T>& Hz) {$/;"	f	class:cpml
updatePsiForMFields	src/cpml.h	/^void cpml<T>::updatePsiForMFields(const data3d<T>& Ex, const data3d<T>& Ey, const data3d<T>& Ez) {$/;"	f	class:cpml
updatePsi_exy_yn	src/cpml.h	/^void cpml<T>::updatePsi_exy_yn(const data3d<T>& Hz) {$/;"	f	class:cpml
updatePsi_exy_yp	src/cpml.h	/^void cpml<T>::updatePsi_exy_yp(const data3d<T>& Hz) {$/;"	f	class:cpml
updatePsi_exz_zn	src/cpml.h	/^void cpml<T>::updatePsi_exz_zn(const data3d<T>& Hy) {$/;"	f	class:cpml
updatePsi_exz_zp	src/cpml.h	/^void cpml<T>::updatePsi_exz_zp(const data3d<T>& Hy) {$/;"	f	class:cpml
updatePsi_eyx_xn	src/cpml.h	/^void cpml<T>::updatePsi_eyx_xn(const data3d<T>& Hz) {$/;"	f	class:cpml
updatePsi_eyx_xp	src/cpml.h	/^void cpml<T>::updatePsi_eyx_xp(const data3d<T>& Hz) {$/;"	f	class:cpml
updatePsi_eyz_zn	src/cpml.h	/^void cpml<T>::updatePsi_eyz_zn(const data3d<T>& Hx) {$/;"	f	class:cpml
updatePsi_eyz_zp	src/cpml.h	/^void cpml<T>::updatePsi_eyz_zp(const data3d<T>& Hx) {$/;"	f	class:cpml
updatePsi_ezx_xn	src/cpml.h	/^void cpml<T>::updatePsi_ezx_xn(const data3d<T>& Hy) {$/;"	f	class:cpml
updatePsi_ezx_xp	src/cpml.h	/^void cpml<T>::updatePsi_ezx_xp(const data3d<T>& Hy) {$/;"	f	class:cpml
updatePsi_ezy_yn	src/cpml.h	/^void cpml<T>::updatePsi_ezy_yn(const data3d<T>& Hx) {$/;"	f	class:cpml
updatePsi_ezy_yp	src/cpml.h	/^void cpml<T>::updatePsi_ezy_yp(const data3d<T>& Hx) {$/;"	f	class:cpml
updatePsi_hxy_yn	src/cpml.h	/^void cpml<T>::updatePsi_hxy_yn(const data3d<T>& Ez) {$/;"	f	class:cpml
updatePsi_hxy_yp	src/cpml.h	/^void cpml<T>::updatePsi_hxy_yp(const data3d<T>& Ez) {$/;"	f	class:cpml
updatePsi_hxz_zn	src/cpml.h	/^void cpml<T>::updatePsi_hxz_zn(const data3d<T>& Ey) {$/;"	f	class:cpml
updatePsi_hxz_zp	src/cpml.h	/^void cpml<T>::updatePsi_hxz_zp(const data3d<T>& Ey) {$/;"	f	class:cpml
updatePsi_hyx_xn	src/cpml.h	/^void cpml<T>::updatePsi_hyx_xn(const data3d<T>& Ez) {$/;"	f	class:cpml
updatePsi_hyx_xp	src/cpml.h	/^void cpml<T>::updatePsi_hyx_xp(const data3d<T>& Ez) {$/;"	f	class:cpml
updatePsi_hyz_zn	src/cpml.h	/^void cpml<T>::updatePsi_hyz_zn(const data3d<T>& Ex) {$/;"	f	class:cpml
updatePsi_hyz_zp	src/cpml.h	/^void cpml<T>::updatePsi_hyz_zp(const data3d<T>& Ex) {$/;"	f	class:cpml
updatePsi_hzx_xn	src/cpml.h	/^void cpml<T>::updatePsi_hzx_xn(const data3d<T>& Ey) {$/;"	f	class:cpml
updatePsi_hzx_xp	src/cpml.h	/^void cpml<T>::updatePsi_hzx_xp(const data3d<T>& Ey) {$/;"	f	class:cpml
updatePsi_hzy_yn	src/cpml.h	/^void cpml<T>::updatePsi_hzy_yn(const data3d<T>& Ex) {$/;"	f	class:cpml
updatePsi_hzy_yp	src/cpml.h	/^void cpml<T>::updatePsi_hzy_yp(const data3d<T>& Ex) {$/;"	f	class:cpml
updateSource	src/fdtd.cpp	/^void fdtd::updateSource(unsigned n) {$/;"	f	class:fdtd
vm	src/fdtd.h	/^    MyDataF vm; \/\/collision frequency$/;"	m	class:fdtd
waveType	src/inputChecker.h	/^    int waveType;$/;"	m	class:inputChecker
writeField	src/fdtd.cpp	/^void fdtd::writeField(unsigned iteration) {$/;"	f	class:fdtd
xZoneLen	src/inputChecker.h	/^    double xZoneLen;$/;"	m	class:inputChecker
yZoneLen	src/inputChecker.h	/^    double yZoneLen;$/;"	m	class:inputChecker
yeeCellSize	src/inputChecker.h	/^    int yeeCellSize;$/;"	m	class:inputChecker
yeeCellSizeX	src/inputChecker.h	/^    int yeeCellSizeX;$/;"	m	class:inputChecker
yeeCellSizeY	src/inputChecker.h	/^    int yeeCellSizeY;$/;"	m	class:inputChecker
yeeCellSizeZ	src/inputChecker.h	/^    int yeeCellSizeZ;$/;"	m	class:inputChecker
yeeCube	src/fdtd.cpp	/^void fdtd::yeeCube(unsigned I, unsigned J, unsigned K, unsigned mType) {$/;"	f	class:fdtd
zZoneLen	src/inputChecker.h	/^    double zZoneLen;$/;"	m	class:inputChecker
zoneLen	src/inputChecker.h	/^    double zoneLen;$/;"	m	class:inputChecker
~Source	src/source.cpp	/^Source::~Source() {$/;"	f	class:Source
~cpml	src/cpml.h	/^cpml<T>::~cpml() {$/;"	f	class:cpml
~data1d	src/datastruct.h	/^    ~data1d() {$/;"	f	class:data1d
~data3d	src/datastruct.h	/^data3d<DataType>::~data3d() {$/;"	f	class:data3d
~fdtd	src/fdtd.cpp	/^fdtd::~fdtd(void) {$/;"	f	class:fdtd
~inputChecker	src/inputChecker.cpp	/^inputChecker::~inputChecker() {$/;"	f	class:inputChecker
